
user_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f6c  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080130fc  080130fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131e0  080131e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080131e0  080131e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131e8  080131e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131e8  080131e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131ec  080131ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080131f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000078  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f39  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b0  00000000  00000000  00027fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00029490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  00029b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bda  00000000  00000000  0002a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008393  00000000  00000000  0004ad92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3bf1  00000000  00000000  00053125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116d16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002288  00000000  00000000  00116d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	20000070 	.word	0x20000070
 80101ac:	00000000 	.word	0x00000000
 80101b0:	080130e4 	.word	0x080130e4

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	20000074 	.word	0x20000074
 80101cc:	080130e4 	.word	0x080130e4

080101d0 <memchr>:
 80101d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101d4:	2a10      	cmp	r2, #16
 80101d6:	db2b      	blt.n	8010230 <memchr+0x60>
 80101d8:	f010 0f07 	tst.w	r0, #7
 80101dc:	d008      	beq.n	80101f0 <memchr+0x20>
 80101de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101e2:	3a01      	subs	r2, #1
 80101e4:	428b      	cmp	r3, r1
 80101e6:	d02d      	beq.n	8010244 <memchr+0x74>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	b342      	cbz	r2, 8010240 <memchr+0x70>
 80101ee:	d1f6      	bne.n	80101de <memchr+0xe>
 80101f0:	b4f0      	push	{r4, r5, r6, r7}
 80101f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80101f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80101fa:	f022 0407 	bic.w	r4, r2, #7
 80101fe:	f07f 0700 	mvns.w	r7, #0
 8010202:	2300      	movs	r3, #0
 8010204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010208:	3c08      	subs	r4, #8
 801020a:	ea85 0501 	eor.w	r5, r5, r1
 801020e:	ea86 0601 	eor.w	r6, r6, r1
 8010212:	fa85 f547 	uadd8	r5, r5, r7
 8010216:	faa3 f587 	sel	r5, r3, r7
 801021a:	fa86 f647 	uadd8	r6, r6, r7
 801021e:	faa5 f687 	sel	r6, r5, r7
 8010222:	b98e      	cbnz	r6, 8010248 <memchr+0x78>
 8010224:	d1ee      	bne.n	8010204 <memchr+0x34>
 8010226:	bcf0      	pop	{r4, r5, r6, r7}
 8010228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801022c:	f002 0207 	and.w	r2, r2, #7
 8010230:	b132      	cbz	r2, 8010240 <memchr+0x70>
 8010232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010236:	3a01      	subs	r2, #1
 8010238:	ea83 0301 	eor.w	r3, r3, r1
 801023c:	b113      	cbz	r3, 8010244 <memchr+0x74>
 801023e:	d1f8      	bne.n	8010232 <memchr+0x62>
 8010240:	2000      	movs	r0, #0
 8010242:	4770      	bx	lr
 8010244:	3801      	subs	r0, #1
 8010246:	4770      	bx	lr
 8010248:	2d00      	cmp	r5, #0
 801024a:	bf06      	itte	eq
 801024c:	4635      	moveq	r5, r6
 801024e:	3803      	subeq	r0, #3
 8010250:	3807      	subne	r0, #7
 8010252:	f015 0f01 	tst.w	r5, #1
 8010256:	d107      	bne.n	8010268 <memchr+0x98>
 8010258:	3001      	adds	r0, #1
 801025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801025e:	bf02      	ittt	eq
 8010260:	3001      	addeq	r0, #1
 8010262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010266:	3001      	addeq	r0, #1
 8010268:	bcf0      	pop	{r4, r5, r6, r7}
 801026a:	3801      	subs	r0, #1
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop

08010270 <__aeabi_uldivmod>:
 8010270:	b953      	cbnz	r3, 8010288 <__aeabi_uldivmod+0x18>
 8010272:	b94a      	cbnz	r2, 8010288 <__aeabi_uldivmod+0x18>
 8010274:	2900      	cmp	r1, #0
 8010276:	bf08      	it	eq
 8010278:	2800      	cmpeq	r0, #0
 801027a:	bf1c      	itt	ne
 801027c:	f04f 31ff 	movne.w	r1, #4294967295
 8010280:	f04f 30ff 	movne.w	r0, #4294967295
 8010284:	f000 b974 	b.w	8010570 <__aeabi_idiv0>
 8010288:	f1ad 0c08 	sub.w	ip, sp, #8
 801028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010290:	f000 f806 	bl	80102a0 <__udivmoddi4>
 8010294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801029c:	b004      	add	sp, #16
 801029e:	4770      	bx	lr

080102a0 <__udivmoddi4>:
 80102a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102a4:	9d08      	ldr	r5, [sp, #32]
 80102a6:	4604      	mov	r4, r0
 80102a8:	468e      	mov	lr, r1
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d14d      	bne.n	801034a <__udivmoddi4+0xaa>
 80102ae:	428a      	cmp	r2, r1
 80102b0:	4694      	mov	ip, r2
 80102b2:	d969      	bls.n	8010388 <__udivmoddi4+0xe8>
 80102b4:	fab2 f282 	clz	r2, r2
 80102b8:	b152      	cbz	r2, 80102d0 <__udivmoddi4+0x30>
 80102ba:	fa01 f302 	lsl.w	r3, r1, r2
 80102be:	f1c2 0120 	rsb	r1, r2, #32
 80102c2:	fa20 f101 	lsr.w	r1, r0, r1
 80102c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80102ca:	ea41 0e03 	orr.w	lr, r1, r3
 80102ce:	4094      	lsls	r4, r2
 80102d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80102d4:	0c21      	lsrs	r1, r4, #16
 80102d6:	fbbe f6f8 	udiv	r6, lr, r8
 80102da:	fa1f f78c 	uxth.w	r7, ip
 80102de:	fb08 e316 	mls	r3, r8, r6, lr
 80102e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80102e6:	fb06 f107 	mul.w	r1, r6, r7
 80102ea:	4299      	cmp	r1, r3
 80102ec:	d90a      	bls.n	8010304 <__udivmoddi4+0x64>
 80102ee:	eb1c 0303 	adds.w	r3, ip, r3
 80102f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80102f6:	f080 811f 	bcs.w	8010538 <__udivmoddi4+0x298>
 80102fa:	4299      	cmp	r1, r3
 80102fc:	f240 811c 	bls.w	8010538 <__udivmoddi4+0x298>
 8010300:	3e02      	subs	r6, #2
 8010302:	4463      	add	r3, ip
 8010304:	1a5b      	subs	r3, r3, r1
 8010306:	b2a4      	uxth	r4, r4
 8010308:	fbb3 f0f8 	udiv	r0, r3, r8
 801030c:	fb08 3310 	mls	r3, r8, r0, r3
 8010310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010314:	fb00 f707 	mul.w	r7, r0, r7
 8010318:	42a7      	cmp	r7, r4
 801031a:	d90a      	bls.n	8010332 <__udivmoddi4+0x92>
 801031c:	eb1c 0404 	adds.w	r4, ip, r4
 8010320:	f100 33ff 	add.w	r3, r0, #4294967295
 8010324:	f080 810a 	bcs.w	801053c <__udivmoddi4+0x29c>
 8010328:	42a7      	cmp	r7, r4
 801032a:	f240 8107 	bls.w	801053c <__udivmoddi4+0x29c>
 801032e:	4464      	add	r4, ip
 8010330:	3802      	subs	r0, #2
 8010332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010336:	1be4      	subs	r4, r4, r7
 8010338:	2600      	movs	r6, #0
 801033a:	b11d      	cbz	r5, 8010344 <__udivmoddi4+0xa4>
 801033c:	40d4      	lsrs	r4, r2
 801033e:	2300      	movs	r3, #0
 8010340:	e9c5 4300 	strd	r4, r3, [r5]
 8010344:	4631      	mov	r1, r6
 8010346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801034a:	428b      	cmp	r3, r1
 801034c:	d909      	bls.n	8010362 <__udivmoddi4+0xc2>
 801034e:	2d00      	cmp	r5, #0
 8010350:	f000 80ef 	beq.w	8010532 <__udivmoddi4+0x292>
 8010354:	2600      	movs	r6, #0
 8010356:	e9c5 0100 	strd	r0, r1, [r5]
 801035a:	4630      	mov	r0, r6
 801035c:	4631      	mov	r1, r6
 801035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010362:	fab3 f683 	clz	r6, r3
 8010366:	2e00      	cmp	r6, #0
 8010368:	d14a      	bne.n	8010400 <__udivmoddi4+0x160>
 801036a:	428b      	cmp	r3, r1
 801036c:	d302      	bcc.n	8010374 <__udivmoddi4+0xd4>
 801036e:	4282      	cmp	r2, r0
 8010370:	f200 80f9 	bhi.w	8010566 <__udivmoddi4+0x2c6>
 8010374:	1a84      	subs	r4, r0, r2
 8010376:	eb61 0303 	sbc.w	r3, r1, r3
 801037a:	2001      	movs	r0, #1
 801037c:	469e      	mov	lr, r3
 801037e:	2d00      	cmp	r5, #0
 8010380:	d0e0      	beq.n	8010344 <__udivmoddi4+0xa4>
 8010382:	e9c5 4e00 	strd	r4, lr, [r5]
 8010386:	e7dd      	b.n	8010344 <__udivmoddi4+0xa4>
 8010388:	b902      	cbnz	r2, 801038c <__udivmoddi4+0xec>
 801038a:	deff      	udf	#255	; 0xff
 801038c:	fab2 f282 	clz	r2, r2
 8010390:	2a00      	cmp	r2, #0
 8010392:	f040 8092 	bne.w	80104ba <__udivmoddi4+0x21a>
 8010396:	eba1 010c 	sub.w	r1, r1, ip
 801039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801039e:	fa1f fe8c 	uxth.w	lr, ip
 80103a2:	2601      	movs	r6, #1
 80103a4:	0c20      	lsrs	r0, r4, #16
 80103a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80103aa:	fb07 1113 	mls	r1, r7, r3, r1
 80103ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80103b2:	fb0e f003 	mul.w	r0, lr, r3
 80103b6:	4288      	cmp	r0, r1
 80103b8:	d908      	bls.n	80103cc <__udivmoddi4+0x12c>
 80103ba:	eb1c 0101 	adds.w	r1, ip, r1
 80103be:	f103 38ff 	add.w	r8, r3, #4294967295
 80103c2:	d202      	bcs.n	80103ca <__udivmoddi4+0x12a>
 80103c4:	4288      	cmp	r0, r1
 80103c6:	f200 80cb 	bhi.w	8010560 <__udivmoddi4+0x2c0>
 80103ca:	4643      	mov	r3, r8
 80103cc:	1a09      	subs	r1, r1, r0
 80103ce:	b2a4      	uxth	r4, r4
 80103d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80103d4:	fb07 1110 	mls	r1, r7, r0, r1
 80103d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80103dc:	fb0e fe00 	mul.w	lr, lr, r0
 80103e0:	45a6      	cmp	lr, r4
 80103e2:	d908      	bls.n	80103f6 <__udivmoddi4+0x156>
 80103e4:	eb1c 0404 	adds.w	r4, ip, r4
 80103e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80103ec:	d202      	bcs.n	80103f4 <__udivmoddi4+0x154>
 80103ee:	45a6      	cmp	lr, r4
 80103f0:	f200 80bb 	bhi.w	801056a <__udivmoddi4+0x2ca>
 80103f4:	4608      	mov	r0, r1
 80103f6:	eba4 040e 	sub.w	r4, r4, lr
 80103fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80103fe:	e79c      	b.n	801033a <__udivmoddi4+0x9a>
 8010400:	f1c6 0720 	rsb	r7, r6, #32
 8010404:	40b3      	lsls	r3, r6
 8010406:	fa22 fc07 	lsr.w	ip, r2, r7
 801040a:	ea4c 0c03 	orr.w	ip, ip, r3
 801040e:	fa20 f407 	lsr.w	r4, r0, r7
 8010412:	fa01 f306 	lsl.w	r3, r1, r6
 8010416:	431c      	orrs	r4, r3
 8010418:	40f9      	lsrs	r1, r7
 801041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801041e:	fa00 f306 	lsl.w	r3, r0, r6
 8010422:	fbb1 f8f9 	udiv	r8, r1, r9
 8010426:	0c20      	lsrs	r0, r4, #16
 8010428:	fa1f fe8c 	uxth.w	lr, ip
 801042c:	fb09 1118 	mls	r1, r9, r8, r1
 8010430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010434:	fb08 f00e 	mul.w	r0, r8, lr
 8010438:	4288      	cmp	r0, r1
 801043a:	fa02 f206 	lsl.w	r2, r2, r6
 801043e:	d90b      	bls.n	8010458 <__udivmoddi4+0x1b8>
 8010440:	eb1c 0101 	adds.w	r1, ip, r1
 8010444:	f108 3aff 	add.w	sl, r8, #4294967295
 8010448:	f080 8088 	bcs.w	801055c <__udivmoddi4+0x2bc>
 801044c:	4288      	cmp	r0, r1
 801044e:	f240 8085 	bls.w	801055c <__udivmoddi4+0x2bc>
 8010452:	f1a8 0802 	sub.w	r8, r8, #2
 8010456:	4461      	add	r1, ip
 8010458:	1a09      	subs	r1, r1, r0
 801045a:	b2a4      	uxth	r4, r4
 801045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8010460:	fb09 1110 	mls	r1, r9, r0, r1
 8010464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8010468:	fb00 fe0e 	mul.w	lr, r0, lr
 801046c:	458e      	cmp	lr, r1
 801046e:	d908      	bls.n	8010482 <__udivmoddi4+0x1e2>
 8010470:	eb1c 0101 	adds.w	r1, ip, r1
 8010474:	f100 34ff 	add.w	r4, r0, #4294967295
 8010478:	d26c      	bcs.n	8010554 <__udivmoddi4+0x2b4>
 801047a:	458e      	cmp	lr, r1
 801047c:	d96a      	bls.n	8010554 <__udivmoddi4+0x2b4>
 801047e:	3802      	subs	r0, #2
 8010480:	4461      	add	r1, ip
 8010482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010486:	fba0 9402 	umull	r9, r4, r0, r2
 801048a:	eba1 010e 	sub.w	r1, r1, lr
 801048e:	42a1      	cmp	r1, r4
 8010490:	46c8      	mov	r8, r9
 8010492:	46a6      	mov	lr, r4
 8010494:	d356      	bcc.n	8010544 <__udivmoddi4+0x2a4>
 8010496:	d053      	beq.n	8010540 <__udivmoddi4+0x2a0>
 8010498:	b15d      	cbz	r5, 80104b2 <__udivmoddi4+0x212>
 801049a:	ebb3 0208 	subs.w	r2, r3, r8
 801049e:	eb61 010e 	sbc.w	r1, r1, lr
 80104a2:	fa01 f707 	lsl.w	r7, r1, r7
 80104a6:	fa22 f306 	lsr.w	r3, r2, r6
 80104aa:	40f1      	lsrs	r1, r6
 80104ac:	431f      	orrs	r7, r3
 80104ae:	e9c5 7100 	strd	r7, r1, [r5]
 80104b2:	2600      	movs	r6, #0
 80104b4:	4631      	mov	r1, r6
 80104b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ba:	f1c2 0320 	rsb	r3, r2, #32
 80104be:	40d8      	lsrs	r0, r3
 80104c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80104c4:	fa21 f303 	lsr.w	r3, r1, r3
 80104c8:	4091      	lsls	r1, r2
 80104ca:	4301      	orrs	r1, r0
 80104cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80104d0:	fa1f fe8c 	uxth.w	lr, ip
 80104d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80104d8:	fb07 3610 	mls	r6, r7, r0, r3
 80104dc:	0c0b      	lsrs	r3, r1, #16
 80104de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80104e2:	fb00 f60e 	mul.w	r6, r0, lr
 80104e6:	429e      	cmp	r6, r3
 80104e8:	fa04 f402 	lsl.w	r4, r4, r2
 80104ec:	d908      	bls.n	8010500 <__udivmoddi4+0x260>
 80104ee:	eb1c 0303 	adds.w	r3, ip, r3
 80104f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80104f6:	d22f      	bcs.n	8010558 <__udivmoddi4+0x2b8>
 80104f8:	429e      	cmp	r6, r3
 80104fa:	d92d      	bls.n	8010558 <__udivmoddi4+0x2b8>
 80104fc:	3802      	subs	r0, #2
 80104fe:	4463      	add	r3, ip
 8010500:	1b9b      	subs	r3, r3, r6
 8010502:	b289      	uxth	r1, r1
 8010504:	fbb3 f6f7 	udiv	r6, r3, r7
 8010508:	fb07 3316 	mls	r3, r7, r6, r3
 801050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010510:	fb06 f30e 	mul.w	r3, r6, lr
 8010514:	428b      	cmp	r3, r1
 8010516:	d908      	bls.n	801052a <__udivmoddi4+0x28a>
 8010518:	eb1c 0101 	adds.w	r1, ip, r1
 801051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8010520:	d216      	bcs.n	8010550 <__udivmoddi4+0x2b0>
 8010522:	428b      	cmp	r3, r1
 8010524:	d914      	bls.n	8010550 <__udivmoddi4+0x2b0>
 8010526:	3e02      	subs	r6, #2
 8010528:	4461      	add	r1, ip
 801052a:	1ac9      	subs	r1, r1, r3
 801052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8010530:	e738      	b.n	80103a4 <__udivmoddi4+0x104>
 8010532:	462e      	mov	r6, r5
 8010534:	4628      	mov	r0, r5
 8010536:	e705      	b.n	8010344 <__udivmoddi4+0xa4>
 8010538:	4606      	mov	r6, r0
 801053a:	e6e3      	b.n	8010304 <__udivmoddi4+0x64>
 801053c:	4618      	mov	r0, r3
 801053e:	e6f8      	b.n	8010332 <__udivmoddi4+0x92>
 8010540:	454b      	cmp	r3, r9
 8010542:	d2a9      	bcs.n	8010498 <__udivmoddi4+0x1f8>
 8010544:	ebb9 0802 	subs.w	r8, r9, r2
 8010548:	eb64 0e0c 	sbc.w	lr, r4, ip
 801054c:	3801      	subs	r0, #1
 801054e:	e7a3      	b.n	8010498 <__udivmoddi4+0x1f8>
 8010550:	4646      	mov	r6, r8
 8010552:	e7ea      	b.n	801052a <__udivmoddi4+0x28a>
 8010554:	4620      	mov	r0, r4
 8010556:	e794      	b.n	8010482 <__udivmoddi4+0x1e2>
 8010558:	4640      	mov	r0, r8
 801055a:	e7d1      	b.n	8010500 <__udivmoddi4+0x260>
 801055c:	46d0      	mov	r8, sl
 801055e:	e77b      	b.n	8010458 <__udivmoddi4+0x1b8>
 8010560:	3b02      	subs	r3, #2
 8010562:	4461      	add	r1, ip
 8010564:	e732      	b.n	80103cc <__udivmoddi4+0x12c>
 8010566:	4630      	mov	r0, r6
 8010568:	e709      	b.n	801037e <__udivmoddi4+0xde>
 801056a:	4464      	add	r4, ip
 801056c:	3802      	subs	r0, #2
 801056e:	e742      	b.n	80103f6 <__udivmoddi4+0x156>

08010570 <__aeabi_idiv0>:
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop

08010574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010578:	f000 faa8 	bl	8010acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801057c:	f000 f834 	bl	80105e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010580:	f000 f8c6 	bl	8010710 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8010584:	f000 f89a 	bl	80106bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  printf("Starting Application (%d.%d)\n", APP_Version[0], APP_Version[1]);
 8010588:	2300      	movs	r3, #0
 801058a:	2202      	movs	r2, #2
 801058c:	4619      	mov	r1, r3
 801058e:	4810      	ldr	r0, [pc, #64]	; (80105d0 <main+0x5c>)
 8010590:	f001 fe1a 	bl	80121c8 <iprintf>
  printf("ID = %lu-%lu-%lu", ID_1, ID_2, ID_3);
 8010594:	4b0f      	ldr	r3, [pc, #60]	; (80105d4 <main+0x60>)
 8010596:	6819      	ldr	r1, [r3, #0]
 8010598:	4b0f      	ldr	r3, [pc, #60]	; (80105d8 <main+0x64>)
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	4b0f      	ldr	r3, [pc, #60]	; (80105dc <main+0x68>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	480f      	ldr	r0, [pc, #60]	; (80105e0 <main+0x6c>)
 80105a2:	f001 fe11 	bl	80121c8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Red LED ON
 80105a6:	2201      	movs	r2, #1
 80105a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80105ac:	480d      	ldr	r0, [pc, #52]	; (80105e4 <main+0x70>)
 80105ae:	f000 fda5 	bl	80110fc <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 80105b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80105b6:	f000 fafb 	bl	8010bb0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Red LED OFF
 80105ba:	2200      	movs	r2, #0
 80105bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80105c0:	4808      	ldr	r0, [pc, #32]	; (80105e4 <main+0x70>)
 80105c2:	f000 fd9b 	bl	80110fc <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 80105c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80105ca:	f000 faf1 	bl	8010bb0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Red LED ON
 80105ce:	e7ea      	b.n	80105a6 <main+0x32>
 80105d0:	080130fc 	.word	0x080130fc
 80105d4:	1fff7a10 	.word	0x1fff7a10
 80105d8:	1fff7a14 	.word	0x1fff7a14
 80105dc:	1fff7a18 	.word	0x1fff7a18
 80105e0:	0801311c 	.word	0x0801311c
 80105e4:	40020c00 	.word	0x40020c00

080105e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b094      	sub	sp, #80	; 0x50
 80105ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80105ee:	f107 0320 	add.w	r3, r7, #32
 80105f2:	2230      	movs	r2, #48	; 0x30
 80105f4:	2100      	movs	r1, #0
 80105f6:	4618      	mov	r0, r3
 80105f8:	f001 fdde 	bl	80121b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80105fc:	f107 030c 	add.w	r3, r7, #12
 8010600:	2200      	movs	r2, #0
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	605a      	str	r2, [r3, #4]
 8010606:	609a      	str	r2, [r3, #8]
 8010608:	60da      	str	r2, [r3, #12]
 801060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801060c:	2300      	movs	r3, #0
 801060e:	60bb      	str	r3, [r7, #8]
 8010610:	4b28      	ldr	r3, [pc, #160]	; (80106b4 <SystemClock_Config+0xcc>)
 8010612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010614:	4a27      	ldr	r2, [pc, #156]	; (80106b4 <SystemClock_Config+0xcc>)
 8010616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801061a:	6413      	str	r3, [r2, #64]	; 0x40
 801061c:	4b25      	ldr	r3, [pc, #148]	; (80106b4 <SystemClock_Config+0xcc>)
 801061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010624:	60bb      	str	r3, [r7, #8]
 8010626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010628:	2300      	movs	r3, #0
 801062a:	607b      	str	r3, [r7, #4]
 801062c:	4b22      	ldr	r3, [pc, #136]	; (80106b8 <SystemClock_Config+0xd0>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a21      	ldr	r2, [pc, #132]	; (80106b8 <SystemClock_Config+0xd0>)
 8010632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010636:	6013      	str	r3, [r2, #0]
 8010638:	4b1f      	ldr	r3, [pc, #124]	; (80106b8 <SystemClock_Config+0xd0>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010640:	607b      	str	r3, [r7, #4]
 8010642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010644:	2302      	movs	r3, #2
 8010646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010648:	2301      	movs	r3, #1
 801064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801064c:	2310      	movs	r3, #16
 801064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010650:	2302      	movs	r3, #2
 8010652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010654:	2300      	movs	r3, #0
 8010656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8010658:	2308      	movs	r3, #8
 801065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 801065c:	23a8      	movs	r3, #168	; 0xa8
 801065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010660:	2302      	movs	r3, #2
 8010662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8010664:	2304      	movs	r3, #4
 8010666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010668:	f107 0320 	add.w	r3, r7, #32
 801066c:	4618      	mov	r0, r3
 801066e:	f000 fd5f 	bl	8011130 <HAL_RCC_OscConfig>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8010678:	f000 f8c0 	bl	80107fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801067c:	230f      	movs	r3, #15
 801067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010680:	2302      	movs	r3, #2
 8010682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010684:	2300      	movs	r3, #0
 8010686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010694:	f107 030c 	add.w	r3, r7, #12
 8010698:	2105      	movs	r1, #5
 801069a:	4618      	mov	r0, r3
 801069c:	f000 ffc0 	bl	8011620 <HAL_RCC_ClockConfig>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d001      	beq.n	80106aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80106a6:	f000 f8a9 	bl	80107fc <Error_Handler>
  }
}
 80106aa:	bf00      	nop
 80106ac:	3750      	adds	r7, #80	; 0x50
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	40023800 	.word	0x40023800
 80106b8:	40007000 	.word	0x40007000

080106bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80106c0:	4b11      	ldr	r3, [pc, #68]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106c2:	4a12      	ldr	r2, [pc, #72]	; (801070c <MX_USART3_UART_Init+0x50>)
 80106c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80106c6:	4b10      	ldr	r3, [pc, #64]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80106cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80106ce:	4b0e      	ldr	r3, [pc, #56]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106d0:	2200      	movs	r2, #0
 80106d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80106d4:	4b0c      	ldr	r3, [pc, #48]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106d6:	2200      	movs	r2, #0
 80106d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80106da:	4b0b      	ldr	r3, [pc, #44]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106dc:	2200      	movs	r2, #0
 80106de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80106e0:	4b09      	ldr	r3, [pc, #36]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106e2:	220c      	movs	r2, #12
 80106e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80106e6:	4b08      	ldr	r3, [pc, #32]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106e8:	2200      	movs	r2, #0
 80106ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80106ec:	4b06      	ldr	r3, [pc, #24]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106ee:	2200      	movs	r2, #0
 80106f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80106f2:	4805      	ldr	r0, [pc, #20]	; (8010708 <MX_USART3_UART_Init+0x4c>)
 80106f4:	f001 f974 	bl	80119e0 <HAL_UART_Init>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d001      	beq.n	8010702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80106fe:	f000 f87d 	bl	80107fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8010702:	bf00      	nop
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	2000008c 	.word	0x2000008c
 801070c:	40004800 	.word	0x40004800

08010710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b08a      	sub	sp, #40	; 0x28
 8010714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010716:	f107 0314 	add.w	r3, r7, #20
 801071a:	2200      	movs	r2, #0
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	605a      	str	r2, [r3, #4]
 8010720:	609a      	str	r2, [r3, #8]
 8010722:	60da      	str	r2, [r3, #12]
 8010724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010726:	2300      	movs	r3, #0
 8010728:	613b      	str	r3, [r7, #16]
 801072a:	4b27      	ldr	r3, [pc, #156]	; (80107c8 <MX_GPIO_Init+0xb8>)
 801072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801072e:	4a26      	ldr	r2, [pc, #152]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010734:	6313      	str	r3, [r2, #48]	; 0x30
 8010736:	4b24      	ldr	r3, [pc, #144]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801073e:	613b      	str	r3, [r7, #16]
 8010740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
 8010746:	4b20      	ldr	r3, [pc, #128]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801074a:	4a1f      	ldr	r2, [pc, #124]	; (80107c8 <MX_GPIO_Init+0xb8>)
 801074c:	f043 0302 	orr.w	r3, r3, #2
 8010750:	6313      	str	r3, [r2, #48]	; 0x30
 8010752:	4b1d      	ldr	r3, [pc, #116]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010756:	f003 0302 	and.w	r3, r3, #2
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801075e:	2300      	movs	r3, #0
 8010760:	60bb      	str	r3, [r7, #8]
 8010762:	4b19      	ldr	r3, [pc, #100]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010766:	4a18      	ldr	r2, [pc, #96]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010768:	f043 0308 	orr.w	r3, r3, #8
 801076c:	6313      	str	r3, [r2, #48]	; 0x30
 801076e:	4b16      	ldr	r3, [pc, #88]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010772:	f003 0308 	and.w	r3, r3, #8
 8010776:	60bb      	str	r3, [r7, #8]
 8010778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801077a:	2300      	movs	r3, #0
 801077c:	607b      	str	r3, [r7, #4]
 801077e:	4b12      	ldr	r3, [pc, #72]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010782:	4a11      	ldr	r2, [pc, #68]	; (80107c8 <MX_GPIO_Init+0xb8>)
 8010784:	f043 0301 	orr.w	r3, r3, #1
 8010788:	6313      	str	r3, [r2, #48]	; 0x30
 801078a:	4b0f      	ldr	r3, [pc, #60]	; (80107c8 <MX_GPIO_Init+0xb8>)
 801078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801078e:	f003 0301 	and.w	r3, r3, #1
 8010792:	607b      	str	r3, [r7, #4]
 8010794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, red_Pin|blue_Pin, GPIO_PIN_RESET);
 8010796:	2200      	movs	r2, #0
 8010798:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 801079c:	480b      	ldr	r0, [pc, #44]	; (80107cc <MX_GPIO_Init+0xbc>)
 801079e:	f000 fcad 	bl	80110fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : red_Pin blue_Pin */
  GPIO_InitStruct.Pin = red_Pin|blue_Pin;
 80107a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80107a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80107a8:	2301      	movs	r3, #1
 80107aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107ac:	2300      	movs	r3, #0
 80107ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107b0:	2300      	movs	r3, #0
 80107b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80107b4:	f107 0314 	add.w	r3, r7, #20
 80107b8:	4619      	mov	r1, r3
 80107ba:	4804      	ldr	r0, [pc, #16]	; (80107cc <MX_GPIO_Init+0xbc>)
 80107bc:	f000 fb02 	bl	8010dc4 <HAL_GPIO_Init>

}
 80107c0:	bf00      	nop
 80107c2:	3728      	adds	r7, #40	; 0x28
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	40023800 	.word	0x40023800
 80107cc:	40020c00 	.word	0x40020c00

080107d0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char* ptr, int len) {
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	b29a      	uxth	r2, r3
 80107e0:	f04f 33ff 	mov.w	r3, #4294967295
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	4804      	ldr	r0, [pc, #16]	; (80107f8 <_write+0x28>)
 80107e8:	f001 f947 	bl	8011a7a <HAL_UART_Transmit>
    return len;
 80107ec:	687b      	ldr	r3, [r7, #4]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	2000008c 	.word	0x2000008c

080107fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80107fc:	b480      	push	{r7}
 80107fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010800:	b672      	cpsid	i
}
 8010802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010804:	e7fe      	b.n	8010804 <Error_Handler+0x8>
	...

08010808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801080e:	2300      	movs	r3, #0
 8010810:	607b      	str	r3, [r7, #4]
 8010812:	4b10      	ldr	r3, [pc, #64]	; (8010854 <HAL_MspInit+0x4c>)
 8010814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010816:	4a0f      	ldr	r2, [pc, #60]	; (8010854 <HAL_MspInit+0x4c>)
 8010818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801081c:	6453      	str	r3, [r2, #68]	; 0x44
 801081e:	4b0d      	ldr	r3, [pc, #52]	; (8010854 <HAL_MspInit+0x4c>)
 8010820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010826:	607b      	str	r3, [r7, #4]
 8010828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801082a:	2300      	movs	r3, #0
 801082c:	603b      	str	r3, [r7, #0]
 801082e:	4b09      	ldr	r3, [pc, #36]	; (8010854 <HAL_MspInit+0x4c>)
 8010830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010832:	4a08      	ldr	r2, [pc, #32]	; (8010854 <HAL_MspInit+0x4c>)
 8010834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010838:	6413      	str	r3, [r2, #64]	; 0x40
 801083a:	4b06      	ldr	r3, [pc, #24]	; (8010854 <HAL_MspInit+0x4c>)
 801083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010842:	603b      	str	r3, [r7, #0]
 8010844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010846:	bf00      	nop
 8010848:	370c      	adds	r7, #12
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	40023800 	.word	0x40023800

08010858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b08a      	sub	sp, #40	; 0x28
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010860:	f107 0314 	add.w	r3, r7, #20
 8010864:	2200      	movs	r2, #0
 8010866:	601a      	str	r2, [r3, #0]
 8010868:	605a      	str	r2, [r3, #4]
 801086a:	609a      	str	r2, [r3, #8]
 801086c:	60da      	str	r2, [r3, #12]
 801086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a19      	ldr	r2, [pc, #100]	; (80108dc <HAL_UART_MspInit+0x84>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d12c      	bne.n	80108d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801087a:	2300      	movs	r3, #0
 801087c:	613b      	str	r3, [r7, #16]
 801087e:	4b18      	ldr	r3, [pc, #96]	; (80108e0 <HAL_UART_MspInit+0x88>)
 8010880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010882:	4a17      	ldr	r2, [pc, #92]	; (80108e0 <HAL_UART_MspInit+0x88>)
 8010884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010888:	6413      	str	r3, [r2, #64]	; 0x40
 801088a:	4b15      	ldr	r3, [pc, #84]	; (80108e0 <HAL_UART_MspInit+0x88>)
 801088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801088e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010892:	613b      	str	r3, [r7, #16]
 8010894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010896:	2300      	movs	r3, #0
 8010898:	60fb      	str	r3, [r7, #12]
 801089a:	4b11      	ldr	r3, [pc, #68]	; (80108e0 <HAL_UART_MspInit+0x88>)
 801089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801089e:	4a10      	ldr	r2, [pc, #64]	; (80108e0 <HAL_UART_MspInit+0x88>)
 80108a0:	f043 0302 	orr.w	r3, r3, #2
 80108a4:	6313      	str	r3, [r2, #48]	; 0x30
 80108a6:	4b0e      	ldr	r3, [pc, #56]	; (80108e0 <HAL_UART_MspInit+0x88>)
 80108a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108aa:	f003 0302 	and.w	r3, r3, #2
 80108ae:	60fb      	str	r3, [r7, #12]
 80108b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80108b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80108b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108b8:	2302      	movs	r3, #2
 80108ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108bc:	2300      	movs	r3, #0
 80108be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108c0:	2303      	movs	r3, #3
 80108c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80108c4:	2307      	movs	r3, #7
 80108c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80108c8:	f107 0314 	add.w	r3, r7, #20
 80108cc:	4619      	mov	r1, r3
 80108ce:	4805      	ldr	r0, [pc, #20]	; (80108e4 <HAL_UART_MspInit+0x8c>)
 80108d0:	f000 fa78 	bl	8010dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80108d4:	bf00      	nop
 80108d6:	3728      	adds	r7, #40	; 0x28
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	40004800 	.word	0x40004800
 80108e0:	40023800 	.word	0x40023800
 80108e4:	40020400 	.word	0x40020400

080108e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80108e8:	b480      	push	{r7}
 80108ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80108ec:	e7fe      	b.n	80108ec <NMI_Handler+0x4>

080108ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80108ee:	b480      	push	{r7}
 80108f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80108f2:	e7fe      	b.n	80108f2 <HardFault_Handler+0x4>

080108f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80108f4:	b480      	push	{r7}
 80108f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80108f8:	e7fe      	b.n	80108f8 <MemManage_Handler+0x4>

080108fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80108fa:	b480      	push	{r7}
 80108fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80108fe:	e7fe      	b.n	80108fe <BusFault_Handler+0x4>

08010900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010900:	b480      	push	{r7}
 8010902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010904:	e7fe      	b.n	8010904 <UsageFault_Handler+0x4>

08010906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010906:	b480      	push	{r7}
 8010908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801090a:	bf00      	nop
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010914:	b480      	push	{r7}
 8010916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010918:	bf00      	nop
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr

08010922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010922:	b480      	push	{r7}
 8010924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010926:	bf00      	nop
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010934:	f000 f91c 	bl	8010b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010938:	bf00      	nop
 801093a:	bd80      	pop	{r7, pc}

0801093c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010948:	2300      	movs	r3, #0
 801094a:	617b      	str	r3, [r7, #20]
 801094c:	e00a      	b.n	8010964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801094e:	f3af 8000 	nop.w
 8010952:	4601      	mov	r1, r0
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	1c5a      	adds	r2, r3, #1
 8010958:	60ba      	str	r2, [r7, #8]
 801095a:	b2ca      	uxtb	r2, r1
 801095c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	3301      	adds	r3, #1
 8010962:	617b      	str	r3, [r7, #20]
 8010964:	697a      	ldr	r2, [r7, #20]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	429a      	cmp	r2, r3
 801096a:	dbf0      	blt.n	801094e <_read+0x12>
	}

return len;
 801096c:	687b      	ldr	r3, [r7, #4]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3718      	adds	r7, #24
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <_close>:
	}
	return len;
}

int _close(int file)
{
 8010976:	b480      	push	{r7}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
	return -1;
 801097e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010982:	4618      	mov	r0, r3
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr

0801098e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801098e:	b480      	push	{r7}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801099e:	605a      	str	r2, [r3, #4]
	return 0;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <_isatty>:

int _isatty(int file)
{
 80109ae:	b480      	push	{r7}
 80109b0:	b083      	sub	sp, #12
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
	return 1;
 80109b6:	2301      	movs	r3, #1
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b085      	sub	sp, #20
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	607a      	str	r2, [r7, #4]
	return 0;
 80109d0:	2300      	movs	r3, #0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3714      	adds	r7, #20
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr
	...

080109e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80109e8:	4a14      	ldr	r2, [pc, #80]	; (8010a3c <_sbrk+0x5c>)
 80109ea:	4b15      	ldr	r3, [pc, #84]	; (8010a40 <_sbrk+0x60>)
 80109ec:	1ad3      	subs	r3, r2, r3
 80109ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80109f4:	4b13      	ldr	r3, [pc, #76]	; (8010a44 <_sbrk+0x64>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d102      	bne.n	8010a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80109fc:	4b11      	ldr	r3, [pc, #68]	; (8010a44 <_sbrk+0x64>)
 80109fe:	4a12      	ldr	r2, [pc, #72]	; (8010a48 <_sbrk+0x68>)
 8010a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010a02:	4b10      	ldr	r3, [pc, #64]	; (8010a44 <_sbrk+0x64>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4413      	add	r3, r2
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d207      	bcs.n	8010a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010a10:	f001 fba8 	bl	8012164 <__errno>
 8010a14:	4603      	mov	r3, r0
 8010a16:	220c      	movs	r2, #12
 8010a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a1e:	e009      	b.n	8010a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010a20:	4b08      	ldr	r3, [pc, #32]	; (8010a44 <_sbrk+0x64>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010a26:	4b07      	ldr	r3, [pc, #28]	; (8010a44 <_sbrk+0x64>)
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	4a05      	ldr	r2, [pc, #20]	; (8010a44 <_sbrk+0x64>)
 8010a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010a32:	68fb      	ldr	r3, [r7, #12]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3718      	adds	r7, #24
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	20020000 	.word	0x20020000
 8010a40:	00000400 	.word	0x00000400
 8010a44:	200000d0 	.word	0x200000d0
 8010a48:	200000e8 	.word	0x200000e8

08010a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010a50:	4b07      	ldr	r3, [pc, #28]	; (8010a70 <SystemInit+0x24>)
 8010a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a56:	4a06      	ldr	r2, [pc, #24]	; (8010a70 <SystemInit+0x24>)
 8010a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8010a60:	4b03      	ldr	r3, [pc, #12]	; (8010a70 <SystemInit+0x24>)
 8010a62:	4a04      	ldr	r2, [pc, #16]	; (8010a74 <SystemInit+0x28>)
 8010a64:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010a66:	bf00      	nop
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr
 8010a70:	e000ed00 	.word	0xe000ed00
 8010a74:	08010000 	.word	0x08010000

08010a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010a7c:	480d      	ldr	r0, [pc, #52]	; (8010ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010a7e:	490e      	ldr	r1, [pc, #56]	; (8010ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010a80:	4a0e      	ldr	r2, [pc, #56]	; (8010abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010a84:	e002      	b.n	8010a8c <LoopCopyDataInit>

08010a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010a8a:	3304      	adds	r3, #4

08010a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010a90:	d3f9      	bcc.n	8010a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010a92:	4a0b      	ldr	r2, [pc, #44]	; (8010ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010a94:	4c0b      	ldr	r4, [pc, #44]	; (8010ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010a98:	e001      	b.n	8010a9e <LoopFillZerobss>

08010a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010a9c:	3204      	adds	r2, #4

08010a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010aa0:	d3fb      	bcc.n	8010a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010aa2:	f7ff ffd3 	bl	8010a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010aa6:	f001 fb63 	bl	8012170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010aaa:	f7ff fd63 	bl	8010574 <main>
  bx  lr    
 8010aae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010ab8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8010abc:	080131f0 	.word	0x080131f0
  ldr r2, =_sbss
 8010ac0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8010ac4:	200000e8 	.word	0x200000e8

08010ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010ac8:	e7fe      	b.n	8010ac8 <ADC_IRQHandler>
	...

08010acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010ad0:	4b0e      	ldr	r3, [pc, #56]	; (8010b0c <HAL_Init+0x40>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4a0d      	ldr	r2, [pc, #52]	; (8010b0c <HAL_Init+0x40>)
 8010ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010adc:	4b0b      	ldr	r3, [pc, #44]	; (8010b0c <HAL_Init+0x40>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a0a      	ldr	r2, [pc, #40]	; (8010b0c <HAL_Init+0x40>)
 8010ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010ae8:	4b08      	ldr	r3, [pc, #32]	; (8010b0c <HAL_Init+0x40>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a07      	ldr	r2, [pc, #28]	; (8010b0c <HAL_Init+0x40>)
 8010aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010af4:	2003      	movs	r0, #3
 8010af6:	f000 f931 	bl	8010d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010afa:	200f      	movs	r0, #15
 8010afc:	f000 f808 	bl	8010b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010b00:	f7ff fe82 	bl	8010808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	40023c00 	.word	0x40023c00

08010b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010b18:	4b12      	ldr	r3, [pc, #72]	; (8010b64 <HAL_InitTick+0x54>)
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	4b12      	ldr	r3, [pc, #72]	; (8010b68 <HAL_InitTick+0x58>)
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	4619      	mov	r1, r3
 8010b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 f93b 	bl	8010daa <HAL_SYSTICK_Config>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e00e      	b.n	8010b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2b0f      	cmp	r3, #15
 8010b42:	d80a      	bhi.n	8010b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010b44:	2200      	movs	r2, #0
 8010b46:	6879      	ldr	r1, [r7, #4]
 8010b48:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4c:	f000 f911 	bl	8010d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010b50:	4a06      	ldr	r2, [pc, #24]	; (8010b6c <HAL_InitTick+0x5c>)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010b56:	2300      	movs	r3, #0
 8010b58:	e000      	b.n	8010b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010b5a:	2301      	movs	r3, #1
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	20000000 	.word	0x20000000
 8010b68:	20000008 	.word	0x20000008
 8010b6c:	20000004 	.word	0x20000004

08010b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010b70:	b480      	push	{r7}
 8010b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010b74:	4b06      	ldr	r3, [pc, #24]	; (8010b90 <HAL_IncTick+0x20>)
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4b06      	ldr	r3, [pc, #24]	; (8010b94 <HAL_IncTick+0x24>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4413      	add	r3, r2
 8010b80:	4a04      	ldr	r2, [pc, #16]	; (8010b94 <HAL_IncTick+0x24>)
 8010b82:	6013      	str	r3, [r2, #0]
}
 8010b84:	bf00      	nop
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	20000008 	.word	0x20000008
 8010b94:	200000d4 	.word	0x200000d4

08010b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8010b9c:	4b03      	ldr	r3, [pc, #12]	; (8010bac <HAL_GetTick+0x14>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	200000d4 	.word	0x200000d4

08010bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010bb8:	f7ff ffee 	bl	8010b98 <HAL_GetTick>
 8010bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc8:	d005      	beq.n	8010bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010bca:	4b0a      	ldr	r3, [pc, #40]	; (8010bf4 <HAL_Delay+0x44>)
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	4413      	add	r3, r2
 8010bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010bd6:	bf00      	nop
 8010bd8:	f7ff ffde 	bl	8010b98 <HAL_GetTick>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d8f7      	bhi.n	8010bd8 <HAL_Delay+0x28>
  {
  }
}
 8010be8:	bf00      	nop
 8010bea:	bf00      	nop
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	20000008 	.word	0x20000008

08010bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b085      	sub	sp, #20
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f003 0307 	and.w	r3, r3, #7
 8010c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010c08:	4b0c      	ldr	r3, [pc, #48]	; (8010c3c <__NVIC_SetPriorityGrouping+0x44>)
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010c14:	4013      	ands	r3, r2
 8010c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010c2a:	4a04      	ldr	r2, [pc, #16]	; (8010c3c <__NVIC_SetPriorityGrouping+0x44>)
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	60d3      	str	r3, [r2, #12]
}
 8010c30:	bf00      	nop
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	e000ed00 	.word	0xe000ed00

08010c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010c40:	b480      	push	{r7}
 8010c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010c44:	4b04      	ldr	r3, [pc, #16]	; (8010c58 <__NVIC_GetPriorityGrouping+0x18>)
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	0a1b      	lsrs	r3, r3, #8
 8010c4a:	f003 0307 	and.w	r3, r3, #7
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr
 8010c58:	e000ed00 	.word	0xe000ed00

08010c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	6039      	str	r1, [r7, #0]
 8010c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	db0a      	blt.n	8010c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	b2da      	uxtb	r2, r3
 8010c74:	490c      	ldr	r1, [pc, #48]	; (8010ca8 <__NVIC_SetPriority+0x4c>)
 8010c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c7a:	0112      	lsls	r2, r2, #4
 8010c7c:	b2d2      	uxtb	r2, r2
 8010c7e:	440b      	add	r3, r1
 8010c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010c84:	e00a      	b.n	8010c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	b2da      	uxtb	r2, r3
 8010c8a:	4908      	ldr	r1, [pc, #32]	; (8010cac <__NVIC_SetPriority+0x50>)
 8010c8c:	79fb      	ldrb	r3, [r7, #7]
 8010c8e:	f003 030f 	and.w	r3, r3, #15
 8010c92:	3b04      	subs	r3, #4
 8010c94:	0112      	lsls	r2, r2, #4
 8010c96:	b2d2      	uxtb	r2, r2
 8010c98:	440b      	add	r3, r1
 8010c9a:	761a      	strb	r2, [r3, #24]
}
 8010c9c:	bf00      	nop
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr
 8010ca8:	e000e100 	.word	0xe000e100
 8010cac:	e000ed00 	.word	0xe000ed00

08010cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b089      	sub	sp, #36	; 0x24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	60f8      	str	r0, [r7, #12]
 8010cb8:	60b9      	str	r1, [r7, #8]
 8010cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f003 0307 	and.w	r3, r3, #7
 8010cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	f1c3 0307 	rsb	r3, r3, #7
 8010cca:	2b04      	cmp	r3, #4
 8010ccc:	bf28      	it	cs
 8010cce:	2304      	movcs	r3, #4
 8010cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	2b06      	cmp	r3, #6
 8010cd8:	d902      	bls.n	8010ce0 <NVIC_EncodePriority+0x30>
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	3b03      	subs	r3, #3
 8010cde:	e000      	b.n	8010ce2 <NVIC_EncodePriority+0x32>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	fa02 f303 	lsl.w	r3, r2, r3
 8010cee:	43da      	mvns	r2, r3
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	401a      	ands	r2, r3
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8010d02:	43d9      	mvns	r1, r3
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010d08:	4313      	orrs	r3, r2
         );
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3724      	adds	r7, #36	; 0x24
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr
	...

08010d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	3b01      	subs	r3, #1
 8010d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010d28:	d301      	bcc.n	8010d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e00f      	b.n	8010d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010d2e:	4a0a      	ldr	r2, [pc, #40]	; (8010d58 <SysTick_Config+0x40>)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	3b01      	subs	r3, #1
 8010d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010d36:	210f      	movs	r1, #15
 8010d38:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3c:	f7ff ff8e 	bl	8010c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010d40:	4b05      	ldr	r3, [pc, #20]	; (8010d58 <SysTick_Config+0x40>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010d46:	4b04      	ldr	r3, [pc, #16]	; (8010d58 <SysTick_Config+0x40>)
 8010d48:	2207      	movs	r2, #7
 8010d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010d4c:	2300      	movs	r3, #0
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	e000e010 	.word	0xe000e010

08010d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff ff47 	bl	8010bf8 <__NVIC_SetPriorityGrouping>
}
 8010d6a:	bf00      	nop
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b086      	sub	sp, #24
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	4603      	mov	r3, r0
 8010d7a:	60b9      	str	r1, [r7, #8]
 8010d7c:	607a      	str	r2, [r7, #4]
 8010d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010d80:	2300      	movs	r3, #0
 8010d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010d84:	f7ff ff5c 	bl	8010c40 <__NVIC_GetPriorityGrouping>
 8010d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	68b9      	ldr	r1, [r7, #8]
 8010d8e:	6978      	ldr	r0, [r7, #20]
 8010d90:	f7ff ff8e 	bl	8010cb0 <NVIC_EncodePriority>
 8010d94:	4602      	mov	r2, r0
 8010d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d9a:	4611      	mov	r1, r2
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff ff5d 	bl	8010c5c <__NVIC_SetPriority>
}
 8010da2:	bf00      	nop
 8010da4:	3718      	adds	r7, #24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010daa:	b580      	push	{r7, lr}
 8010dac:	b082      	sub	sp, #8
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ff ffb0 	bl	8010d18 <SysTick_Config>
 8010db8:	4603      	mov	r3, r0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
	...

08010dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b089      	sub	sp, #36	; 0x24
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010dda:	2300      	movs	r3, #0
 8010ddc:	61fb      	str	r3, [r7, #28]
 8010dde:	e16b      	b.n	80110b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010de0:	2201      	movs	r2, #1
 8010de2:	69fb      	ldr	r3, [r7, #28]
 8010de4:	fa02 f303 	lsl.w	r3, r2, r3
 8010de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	697a      	ldr	r2, [r7, #20]
 8010df0:	4013      	ands	r3, r2
 8010df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010df4:	693a      	ldr	r2, [r7, #16]
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	f040 815a 	bne.w	80110b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	f003 0303 	and.w	r3, r3, #3
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d005      	beq.n	8010e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e12:	2b02      	cmp	r3, #2
 8010e14:	d130      	bne.n	8010e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	005b      	lsls	r3, r3, #1
 8010e20:	2203      	movs	r2, #3
 8010e22:	fa02 f303 	lsl.w	r3, r2, r3
 8010e26:	43db      	mvns	r3, r3
 8010e28:	69ba      	ldr	r2, [r7, #24]
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	68da      	ldr	r2, [r3, #12]
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	005b      	lsls	r3, r3, #1
 8010e36:	fa02 f303 	lsl.w	r3, r2, r3
 8010e3a:	69ba      	ldr	r2, [r7, #24]
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	69ba      	ldr	r2, [r7, #24]
 8010e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	fa02 f303 	lsl.w	r3, r2, r3
 8010e54:	43db      	mvns	r3, r3
 8010e56:	69ba      	ldr	r2, [r7, #24]
 8010e58:	4013      	ands	r3, r2
 8010e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	091b      	lsrs	r3, r3, #4
 8010e62:	f003 0201 	and.w	r2, r3, #1
 8010e66:	69fb      	ldr	r3, [r7, #28]
 8010e68:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6c:	69ba      	ldr	r2, [r7, #24]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	69ba      	ldr	r2, [r7, #24]
 8010e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	f003 0303 	and.w	r3, r3, #3
 8010e80:	2b03      	cmp	r3, #3
 8010e82:	d017      	beq.n	8010eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	2203      	movs	r2, #3
 8010e90:	fa02 f303 	lsl.w	r3, r2, r3
 8010e94:	43db      	mvns	r3, r3
 8010e96:	69ba      	ldr	r2, [r7, #24]
 8010e98:	4013      	ands	r3, r2
 8010e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	689a      	ldr	r2, [r3, #8]
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	005b      	lsls	r3, r3, #1
 8010ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea8:	69ba      	ldr	r2, [r7, #24]
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	69ba      	ldr	r2, [r7, #24]
 8010eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	f003 0303 	and.w	r3, r3, #3
 8010ebc:	2b02      	cmp	r3, #2
 8010ebe:	d123      	bne.n	8010f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	08da      	lsrs	r2, r3, #3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	3208      	adds	r2, #8
 8010ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	f003 0307 	and.w	r3, r3, #7
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	220f      	movs	r2, #15
 8010ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8010edc:	43db      	mvns	r3, r3
 8010ede:	69ba      	ldr	r2, [r7, #24]
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	691a      	ldr	r2, [r3, #16]
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	f003 0307 	and.w	r3, r3, #7
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ef4:	69ba      	ldr	r2, [r7, #24]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	08da      	lsrs	r2, r3, #3
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	3208      	adds	r2, #8
 8010f02:	69b9      	ldr	r1, [r7, #24]
 8010f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	005b      	lsls	r3, r3, #1
 8010f12:	2203      	movs	r2, #3
 8010f14:	fa02 f303 	lsl.w	r3, r2, r3
 8010f18:	43db      	mvns	r3, r3
 8010f1a:	69ba      	ldr	r2, [r7, #24]
 8010f1c:	4013      	ands	r3, r2
 8010f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	f003 0203 	and.w	r2, r3, #3
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f30:	69ba      	ldr	r2, [r7, #24]
 8010f32:	4313      	orrs	r3, r2
 8010f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	69ba      	ldr	r2, [r7, #24]
 8010f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f000 80b4 	beq.w	80110b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60fb      	str	r3, [r7, #12]
 8010f4e:	4b60      	ldr	r3, [pc, #384]	; (80110d0 <HAL_GPIO_Init+0x30c>)
 8010f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f52:	4a5f      	ldr	r2, [pc, #380]	; (80110d0 <HAL_GPIO_Init+0x30c>)
 8010f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f58:	6453      	str	r3, [r2, #68]	; 0x44
 8010f5a:	4b5d      	ldr	r3, [pc, #372]	; (80110d0 <HAL_GPIO_Init+0x30c>)
 8010f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f62:	60fb      	str	r3, [r7, #12]
 8010f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010f66:	4a5b      	ldr	r2, [pc, #364]	; (80110d4 <HAL_GPIO_Init+0x310>)
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	089b      	lsrs	r3, r3, #2
 8010f6c:	3302      	adds	r3, #2
 8010f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	f003 0303 	and.w	r3, r3, #3
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	220f      	movs	r2, #15
 8010f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010f82:	43db      	mvns	r3, r3
 8010f84:	69ba      	ldr	r2, [r7, #24]
 8010f86:	4013      	ands	r3, r2
 8010f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	4a52      	ldr	r2, [pc, #328]	; (80110d8 <HAL_GPIO_Init+0x314>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d02b      	beq.n	8010fea <HAL_GPIO_Init+0x226>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4a51      	ldr	r2, [pc, #324]	; (80110dc <HAL_GPIO_Init+0x318>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d025      	beq.n	8010fe6 <HAL_GPIO_Init+0x222>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	4a50      	ldr	r2, [pc, #320]	; (80110e0 <HAL_GPIO_Init+0x31c>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d01f      	beq.n	8010fe2 <HAL_GPIO_Init+0x21e>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4a4f      	ldr	r2, [pc, #316]	; (80110e4 <HAL_GPIO_Init+0x320>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d019      	beq.n	8010fde <HAL_GPIO_Init+0x21a>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4a4e      	ldr	r2, [pc, #312]	; (80110e8 <HAL_GPIO_Init+0x324>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d013      	beq.n	8010fda <HAL_GPIO_Init+0x216>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4a4d      	ldr	r2, [pc, #308]	; (80110ec <HAL_GPIO_Init+0x328>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d00d      	beq.n	8010fd6 <HAL_GPIO_Init+0x212>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4a4c      	ldr	r2, [pc, #304]	; (80110f0 <HAL_GPIO_Init+0x32c>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d007      	beq.n	8010fd2 <HAL_GPIO_Init+0x20e>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4a4b      	ldr	r2, [pc, #300]	; (80110f4 <HAL_GPIO_Init+0x330>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d101      	bne.n	8010fce <HAL_GPIO_Init+0x20a>
 8010fca:	2307      	movs	r3, #7
 8010fcc:	e00e      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fce:	2308      	movs	r3, #8
 8010fd0:	e00c      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fd2:	2306      	movs	r3, #6
 8010fd4:	e00a      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fd6:	2305      	movs	r3, #5
 8010fd8:	e008      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fda:	2304      	movs	r3, #4
 8010fdc:	e006      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fde:	2303      	movs	r3, #3
 8010fe0:	e004      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fe2:	2302      	movs	r3, #2
 8010fe4:	e002      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e000      	b.n	8010fec <HAL_GPIO_Init+0x228>
 8010fea:	2300      	movs	r3, #0
 8010fec:	69fa      	ldr	r2, [r7, #28]
 8010fee:	f002 0203 	and.w	r2, r2, #3
 8010ff2:	0092      	lsls	r2, r2, #2
 8010ff4:	4093      	lsls	r3, r2
 8010ff6:	69ba      	ldr	r2, [r7, #24]
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010ffc:	4935      	ldr	r1, [pc, #212]	; (80110d4 <HAL_GPIO_Init+0x310>)
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	089b      	lsrs	r3, r3, #2
 8011002:	3302      	adds	r3, #2
 8011004:	69ba      	ldr	r2, [r7, #24]
 8011006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801100a:	4b3b      	ldr	r3, [pc, #236]	; (80110f8 <HAL_GPIO_Init+0x334>)
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	43db      	mvns	r3, r3
 8011014:	69ba      	ldr	r2, [r7, #24]
 8011016:	4013      	ands	r3, r2
 8011018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011022:	2b00      	cmp	r3, #0
 8011024:	d003      	beq.n	801102e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8011026:	69ba      	ldr	r2, [r7, #24]
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	4313      	orrs	r3, r2
 801102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801102e:	4a32      	ldr	r2, [pc, #200]	; (80110f8 <HAL_GPIO_Init+0x334>)
 8011030:	69bb      	ldr	r3, [r7, #24]
 8011032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011034:	4b30      	ldr	r3, [pc, #192]	; (80110f8 <HAL_GPIO_Init+0x334>)
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	43db      	mvns	r3, r3
 801103e:	69ba      	ldr	r2, [r7, #24]
 8011040:	4013      	ands	r3, r2
 8011042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801104c:	2b00      	cmp	r3, #0
 801104e:	d003      	beq.n	8011058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011050:	69ba      	ldr	r2, [r7, #24]
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	4313      	orrs	r3, r2
 8011056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011058:	4a27      	ldr	r2, [pc, #156]	; (80110f8 <HAL_GPIO_Init+0x334>)
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801105e:	4b26      	ldr	r3, [pc, #152]	; (80110f8 <HAL_GPIO_Init+0x334>)
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	43db      	mvns	r3, r3
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	4013      	ands	r3, r2
 801106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011076:	2b00      	cmp	r3, #0
 8011078:	d003      	beq.n	8011082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801107a:	69ba      	ldr	r2, [r7, #24]
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	4313      	orrs	r3, r2
 8011080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011082:	4a1d      	ldr	r2, [pc, #116]	; (80110f8 <HAL_GPIO_Init+0x334>)
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011088:	4b1b      	ldr	r3, [pc, #108]	; (80110f8 <HAL_GPIO_Init+0x334>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	43db      	mvns	r3, r3
 8011092:	69ba      	ldr	r2, [r7, #24]
 8011094:	4013      	ands	r3, r2
 8011096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d003      	beq.n	80110ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80110a4:	69ba      	ldr	r2, [r7, #24]
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	4313      	orrs	r3, r2
 80110aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80110ac:	4a12      	ldr	r2, [pc, #72]	; (80110f8 <HAL_GPIO_Init+0x334>)
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	3301      	adds	r3, #1
 80110b6:	61fb      	str	r3, [r7, #28]
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	2b0f      	cmp	r3, #15
 80110bc:	f67f ae90 	bls.w	8010de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80110c0:	bf00      	nop
 80110c2:	bf00      	nop
 80110c4:	3724      	adds	r7, #36	; 0x24
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	40023800 	.word	0x40023800
 80110d4:	40013800 	.word	0x40013800
 80110d8:	40020000 	.word	0x40020000
 80110dc:	40020400 	.word	0x40020400
 80110e0:	40020800 	.word	0x40020800
 80110e4:	40020c00 	.word	0x40020c00
 80110e8:	40021000 	.word	0x40021000
 80110ec:	40021400 	.word	0x40021400
 80110f0:	40021800 	.word	0x40021800
 80110f4:	40021c00 	.word	0x40021c00
 80110f8:	40013c00 	.word	0x40013c00

080110fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	460b      	mov	r3, r1
 8011106:	807b      	strh	r3, [r7, #2]
 8011108:	4613      	mov	r3, r2
 801110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801110c:	787b      	ldrb	r3, [r7, #1]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d003      	beq.n	801111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011112:	887a      	ldrh	r2, [r7, #2]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011118:	e003      	b.n	8011122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801111a:	887b      	ldrh	r3, [r7, #2]
 801111c:	041a      	lsls	r2, r3, #16
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	619a      	str	r2, [r3, #24]
}
 8011122:	bf00      	nop
 8011124:	370c      	adds	r7, #12
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
	...

08011130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b086      	sub	sp, #24
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d101      	bne.n	8011142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801113e:	2301      	movs	r3, #1
 8011140:	e267      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	f003 0301 	and.w	r3, r3, #1
 801114a:	2b00      	cmp	r3, #0
 801114c:	d075      	beq.n	801123a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801114e:	4b88      	ldr	r3, [pc, #544]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	f003 030c 	and.w	r3, r3, #12
 8011156:	2b04      	cmp	r3, #4
 8011158:	d00c      	beq.n	8011174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801115a:	4b85      	ldr	r3, [pc, #532]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 801115c:	689b      	ldr	r3, [r3, #8]
 801115e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011162:	2b08      	cmp	r3, #8
 8011164:	d112      	bne.n	801118c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011166:	4b82      	ldr	r3, [pc, #520]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801116e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011172:	d10b      	bne.n	801118c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011174:	4b7e      	ldr	r3, [pc, #504]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801117c:	2b00      	cmp	r3, #0
 801117e:	d05b      	beq.n	8011238 <HAL_RCC_OscConfig+0x108>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d157      	bne.n	8011238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011188:	2301      	movs	r3, #1
 801118a:	e242      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011194:	d106      	bne.n	80111a4 <HAL_RCC_OscConfig+0x74>
 8011196:	4b76      	ldr	r3, [pc, #472]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a75      	ldr	r2, [pc, #468]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 801119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80111a0:	6013      	str	r3, [r2, #0]
 80111a2:	e01d      	b.n	80111e0 <HAL_RCC_OscConfig+0xb0>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80111ac:	d10c      	bne.n	80111c8 <HAL_RCC_OscConfig+0x98>
 80111ae:	4b70      	ldr	r3, [pc, #448]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a6f      	ldr	r2, [pc, #444]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80111b8:	6013      	str	r3, [r2, #0]
 80111ba:	4b6d      	ldr	r3, [pc, #436]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	4a6c      	ldr	r2, [pc, #432]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80111c4:	6013      	str	r3, [r2, #0]
 80111c6:	e00b      	b.n	80111e0 <HAL_RCC_OscConfig+0xb0>
 80111c8:	4b69      	ldr	r3, [pc, #420]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	4a68      	ldr	r2, [pc, #416]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80111d2:	6013      	str	r3, [r2, #0]
 80111d4:	4b66      	ldr	r3, [pc, #408]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4a65      	ldr	r2, [pc, #404]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80111da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80111de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d013      	beq.n	8011210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80111e8:	f7ff fcd6 	bl	8010b98 <HAL_GetTick>
 80111ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80111ee:	e008      	b.n	8011202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80111f0:	f7ff fcd2 	bl	8010b98 <HAL_GetTick>
 80111f4:	4602      	mov	r2, r0
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	2b64      	cmp	r3, #100	; 0x64
 80111fc:	d901      	bls.n	8011202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80111fe:	2303      	movs	r3, #3
 8011200:	e207      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011202:	4b5b      	ldr	r3, [pc, #364]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801120a:	2b00      	cmp	r3, #0
 801120c:	d0f0      	beq.n	80111f0 <HAL_RCC_OscConfig+0xc0>
 801120e:	e014      	b.n	801123a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011210:	f7ff fcc2 	bl	8010b98 <HAL_GetTick>
 8011214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011216:	e008      	b.n	801122a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011218:	f7ff fcbe 	bl	8010b98 <HAL_GetTick>
 801121c:	4602      	mov	r2, r0
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	2b64      	cmp	r3, #100	; 0x64
 8011224:	d901      	bls.n	801122a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011226:	2303      	movs	r3, #3
 8011228:	e1f3      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801122a:	4b51      	ldr	r3, [pc, #324]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011232:	2b00      	cmp	r3, #0
 8011234:	d1f0      	bne.n	8011218 <HAL_RCC_OscConfig+0xe8>
 8011236:	e000      	b.n	801123a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f003 0302 	and.w	r3, r3, #2
 8011242:	2b00      	cmp	r3, #0
 8011244:	d063      	beq.n	801130e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011246:	4b4a      	ldr	r3, [pc, #296]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011248:	689b      	ldr	r3, [r3, #8]
 801124a:	f003 030c 	and.w	r3, r3, #12
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00b      	beq.n	801126a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011252:	4b47      	ldr	r3, [pc, #284]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011254:	689b      	ldr	r3, [r3, #8]
 8011256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801125a:	2b08      	cmp	r3, #8
 801125c:	d11c      	bne.n	8011298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801125e:	4b44      	ldr	r3, [pc, #272]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011266:	2b00      	cmp	r3, #0
 8011268:	d116      	bne.n	8011298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801126a:	4b41      	ldr	r3, [pc, #260]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f003 0302 	and.w	r3, r3, #2
 8011272:	2b00      	cmp	r3, #0
 8011274:	d005      	beq.n	8011282 <HAL_RCC_OscConfig+0x152>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	68db      	ldr	r3, [r3, #12]
 801127a:	2b01      	cmp	r3, #1
 801127c:	d001      	beq.n	8011282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801127e:	2301      	movs	r3, #1
 8011280:	e1c7      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011282:	4b3b      	ldr	r3, [pc, #236]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	00db      	lsls	r3, r3, #3
 8011290:	4937      	ldr	r1, [pc, #220]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011292:	4313      	orrs	r3, r2
 8011294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011296:	e03a      	b.n	801130e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d020      	beq.n	80112e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80112a0:	4b34      	ldr	r3, [pc, #208]	; (8011374 <HAL_RCC_OscConfig+0x244>)
 80112a2:	2201      	movs	r2, #1
 80112a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112a6:	f7ff fc77 	bl	8010b98 <HAL_GetTick>
 80112aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80112ac:	e008      	b.n	80112c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80112ae:	f7ff fc73 	bl	8010b98 <HAL_GetTick>
 80112b2:	4602      	mov	r2, r0
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	2b02      	cmp	r3, #2
 80112ba:	d901      	bls.n	80112c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80112bc:	2303      	movs	r3, #3
 80112be:	e1a8      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80112c0:	4b2b      	ldr	r3, [pc, #172]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	f003 0302 	and.w	r3, r3, #2
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d0f0      	beq.n	80112ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112cc:	4b28      	ldr	r3, [pc, #160]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	691b      	ldr	r3, [r3, #16]
 80112d8:	00db      	lsls	r3, r3, #3
 80112da:	4925      	ldr	r1, [pc, #148]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 80112dc:	4313      	orrs	r3, r2
 80112de:	600b      	str	r3, [r1, #0]
 80112e0:	e015      	b.n	801130e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80112e2:	4b24      	ldr	r3, [pc, #144]	; (8011374 <HAL_RCC_OscConfig+0x244>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112e8:	f7ff fc56 	bl	8010b98 <HAL_GetTick>
 80112ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80112ee:	e008      	b.n	8011302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80112f0:	f7ff fc52 	bl	8010b98 <HAL_GetTick>
 80112f4:	4602      	mov	r2, r0
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d901      	bls.n	8011302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80112fe:	2303      	movs	r3, #3
 8011300:	e187      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011302:	4b1b      	ldr	r3, [pc, #108]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f003 0302 	and.w	r3, r3, #2
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1f0      	bne.n	80112f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f003 0308 	and.w	r3, r3, #8
 8011316:	2b00      	cmp	r3, #0
 8011318:	d036      	beq.n	8011388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	695b      	ldr	r3, [r3, #20]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d016      	beq.n	8011350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011322:	4b15      	ldr	r3, [pc, #84]	; (8011378 <HAL_RCC_OscConfig+0x248>)
 8011324:	2201      	movs	r2, #1
 8011326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011328:	f7ff fc36 	bl	8010b98 <HAL_GetTick>
 801132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801132e:	e008      	b.n	8011342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011330:	f7ff fc32 	bl	8010b98 <HAL_GetTick>
 8011334:	4602      	mov	r2, r0
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	2b02      	cmp	r3, #2
 801133c:	d901      	bls.n	8011342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801133e:	2303      	movs	r3, #3
 8011340:	e167      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011342:	4b0b      	ldr	r3, [pc, #44]	; (8011370 <HAL_RCC_OscConfig+0x240>)
 8011344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011346:	f003 0302 	and.w	r3, r3, #2
 801134a:	2b00      	cmp	r3, #0
 801134c:	d0f0      	beq.n	8011330 <HAL_RCC_OscConfig+0x200>
 801134e:	e01b      	b.n	8011388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011350:	4b09      	ldr	r3, [pc, #36]	; (8011378 <HAL_RCC_OscConfig+0x248>)
 8011352:	2200      	movs	r2, #0
 8011354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011356:	f7ff fc1f 	bl	8010b98 <HAL_GetTick>
 801135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801135c:	e00e      	b.n	801137c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801135e:	f7ff fc1b 	bl	8010b98 <HAL_GetTick>
 8011362:	4602      	mov	r2, r0
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	1ad3      	subs	r3, r2, r3
 8011368:	2b02      	cmp	r3, #2
 801136a:	d907      	bls.n	801137c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801136c:	2303      	movs	r3, #3
 801136e:	e150      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
 8011370:	40023800 	.word	0x40023800
 8011374:	42470000 	.word	0x42470000
 8011378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801137c:	4b88      	ldr	r3, [pc, #544]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801137e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011380:	f003 0302 	and.w	r3, r3, #2
 8011384:	2b00      	cmp	r3, #0
 8011386:	d1ea      	bne.n	801135e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f003 0304 	and.w	r3, r3, #4
 8011390:	2b00      	cmp	r3, #0
 8011392:	f000 8097 	beq.w	80114c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011396:	2300      	movs	r3, #0
 8011398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801139a:	4b81      	ldr	r3, [pc, #516]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d10f      	bne.n	80113c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80113a6:	2300      	movs	r3, #0
 80113a8:	60bb      	str	r3, [r7, #8]
 80113aa:	4b7d      	ldr	r3, [pc, #500]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 80113ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ae:	4a7c      	ldr	r2, [pc, #496]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 80113b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80113b4:	6413      	str	r3, [r2, #64]	; 0x40
 80113b6:	4b7a      	ldr	r3, [pc, #488]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 80113b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80113be:	60bb      	str	r3, [r7, #8]
 80113c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80113c2:	2301      	movs	r3, #1
 80113c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80113c6:	4b77      	ldr	r3, [pc, #476]	; (80115a4 <HAL_RCC_OscConfig+0x474>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d118      	bne.n	8011404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80113d2:	4b74      	ldr	r3, [pc, #464]	; (80115a4 <HAL_RCC_OscConfig+0x474>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	4a73      	ldr	r2, [pc, #460]	; (80115a4 <HAL_RCC_OscConfig+0x474>)
 80113d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80113dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80113de:	f7ff fbdb 	bl	8010b98 <HAL_GetTick>
 80113e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80113e4:	e008      	b.n	80113f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80113e6:	f7ff fbd7 	bl	8010b98 <HAL_GetTick>
 80113ea:	4602      	mov	r2, r0
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	2b02      	cmp	r3, #2
 80113f2:	d901      	bls.n	80113f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80113f4:	2303      	movs	r3, #3
 80113f6:	e10c      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80113f8:	4b6a      	ldr	r3, [pc, #424]	; (80115a4 <HAL_RCC_OscConfig+0x474>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011400:	2b00      	cmp	r3, #0
 8011402:	d0f0      	beq.n	80113e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d106      	bne.n	801141a <HAL_RCC_OscConfig+0x2ea>
 801140c:	4b64      	ldr	r3, [pc, #400]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011410:	4a63      	ldr	r2, [pc, #396]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011412:	f043 0301 	orr.w	r3, r3, #1
 8011416:	6713      	str	r3, [r2, #112]	; 0x70
 8011418:	e01c      	b.n	8011454 <HAL_RCC_OscConfig+0x324>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	2b05      	cmp	r3, #5
 8011420:	d10c      	bne.n	801143c <HAL_RCC_OscConfig+0x30c>
 8011422:	4b5f      	ldr	r3, [pc, #380]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011426:	4a5e      	ldr	r2, [pc, #376]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011428:	f043 0304 	orr.w	r3, r3, #4
 801142c:	6713      	str	r3, [r2, #112]	; 0x70
 801142e:	4b5c      	ldr	r3, [pc, #368]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011432:	4a5b      	ldr	r2, [pc, #364]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011434:	f043 0301 	orr.w	r3, r3, #1
 8011438:	6713      	str	r3, [r2, #112]	; 0x70
 801143a:	e00b      	b.n	8011454 <HAL_RCC_OscConfig+0x324>
 801143c:	4b58      	ldr	r3, [pc, #352]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011440:	4a57      	ldr	r2, [pc, #348]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011442:	f023 0301 	bic.w	r3, r3, #1
 8011446:	6713      	str	r3, [r2, #112]	; 0x70
 8011448:	4b55      	ldr	r3, [pc, #340]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801144a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801144c:	4a54      	ldr	r2, [pc, #336]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801144e:	f023 0304 	bic.w	r3, r3, #4
 8011452:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	689b      	ldr	r3, [r3, #8]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d015      	beq.n	8011488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801145c:	f7ff fb9c 	bl	8010b98 <HAL_GetTick>
 8011460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011462:	e00a      	b.n	801147a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011464:	f7ff fb98 	bl	8010b98 <HAL_GetTick>
 8011468:	4602      	mov	r2, r0
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	1ad3      	subs	r3, r2, r3
 801146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011472:	4293      	cmp	r3, r2
 8011474:	d901      	bls.n	801147a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011476:	2303      	movs	r3, #3
 8011478:	e0cb      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801147a:	4b49      	ldr	r3, [pc, #292]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801147e:	f003 0302 	and.w	r3, r3, #2
 8011482:	2b00      	cmp	r3, #0
 8011484:	d0ee      	beq.n	8011464 <HAL_RCC_OscConfig+0x334>
 8011486:	e014      	b.n	80114b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011488:	f7ff fb86 	bl	8010b98 <HAL_GetTick>
 801148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801148e:	e00a      	b.n	80114a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011490:	f7ff fb82 	bl	8010b98 <HAL_GetTick>
 8011494:	4602      	mov	r2, r0
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	1ad3      	subs	r3, r2, r3
 801149a:	f241 3288 	movw	r2, #5000	; 0x1388
 801149e:	4293      	cmp	r3, r2
 80114a0:	d901      	bls.n	80114a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80114a2:	2303      	movs	r3, #3
 80114a4:	e0b5      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114a6:	4b3e      	ldr	r3, [pc, #248]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 80114a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114aa:	f003 0302 	and.w	r3, r3, #2
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1ee      	bne.n	8011490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80114b2:	7dfb      	ldrb	r3, [r7, #23]
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d105      	bne.n	80114c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80114b8:	4b39      	ldr	r3, [pc, #228]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 80114ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114bc:	4a38      	ldr	r2, [pc, #224]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 80114be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80114c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	699b      	ldr	r3, [r3, #24]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f000 80a1 	beq.w	8011610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80114ce:	4b34      	ldr	r3, [pc, #208]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	f003 030c 	and.w	r3, r3, #12
 80114d6:	2b08      	cmp	r3, #8
 80114d8:	d05c      	beq.n	8011594 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	699b      	ldr	r3, [r3, #24]
 80114de:	2b02      	cmp	r3, #2
 80114e0:	d141      	bne.n	8011566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80114e2:	4b31      	ldr	r3, [pc, #196]	; (80115a8 <HAL_RCC_OscConfig+0x478>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80114e8:	f7ff fb56 	bl	8010b98 <HAL_GetTick>
 80114ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80114ee:	e008      	b.n	8011502 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80114f0:	f7ff fb52 	bl	8010b98 <HAL_GetTick>
 80114f4:	4602      	mov	r2, r0
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	1ad3      	subs	r3, r2, r3
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	d901      	bls.n	8011502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80114fe:	2303      	movs	r3, #3
 8011500:	e087      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011502:	4b27      	ldr	r3, [pc, #156]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1f0      	bne.n	80114f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	69da      	ldr	r2, [r3, #28]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	431a      	orrs	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151c:	019b      	lsls	r3, r3, #6
 801151e:	431a      	orrs	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011524:	085b      	lsrs	r3, r3, #1
 8011526:	3b01      	subs	r3, #1
 8011528:	041b      	lsls	r3, r3, #16
 801152a:	431a      	orrs	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011530:	061b      	lsls	r3, r3, #24
 8011532:	491b      	ldr	r1, [pc, #108]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011534:	4313      	orrs	r3, r2
 8011536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011538:	4b1b      	ldr	r3, [pc, #108]	; (80115a8 <HAL_RCC_OscConfig+0x478>)
 801153a:	2201      	movs	r2, #1
 801153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801153e:	f7ff fb2b 	bl	8010b98 <HAL_GetTick>
 8011542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011544:	e008      	b.n	8011558 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011546:	f7ff fb27 	bl	8010b98 <HAL_GetTick>
 801154a:	4602      	mov	r2, r0
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	1ad3      	subs	r3, r2, r3
 8011550:	2b02      	cmp	r3, #2
 8011552:	d901      	bls.n	8011558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011554:	2303      	movs	r3, #3
 8011556:	e05c      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011558:	4b11      	ldr	r3, [pc, #68]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011560:	2b00      	cmp	r3, #0
 8011562:	d0f0      	beq.n	8011546 <HAL_RCC_OscConfig+0x416>
 8011564:	e054      	b.n	8011610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011566:	4b10      	ldr	r3, [pc, #64]	; (80115a8 <HAL_RCC_OscConfig+0x478>)
 8011568:	2200      	movs	r2, #0
 801156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801156c:	f7ff fb14 	bl	8010b98 <HAL_GetTick>
 8011570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011572:	e008      	b.n	8011586 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011574:	f7ff fb10 	bl	8010b98 <HAL_GetTick>
 8011578:	4602      	mov	r2, r0
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	2b02      	cmp	r3, #2
 8011580:	d901      	bls.n	8011586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011582:	2303      	movs	r3, #3
 8011584:	e045      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011586:	4b06      	ldr	r3, [pc, #24]	; (80115a0 <HAL_RCC_OscConfig+0x470>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1f0      	bne.n	8011574 <HAL_RCC_OscConfig+0x444>
 8011592:	e03d      	b.n	8011610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	699b      	ldr	r3, [r3, #24]
 8011598:	2b01      	cmp	r3, #1
 801159a:	d107      	bne.n	80115ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801159c:	2301      	movs	r3, #1
 801159e:	e038      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
 80115a0:	40023800 	.word	0x40023800
 80115a4:	40007000 	.word	0x40007000
 80115a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80115ac:	4b1b      	ldr	r3, [pc, #108]	; (801161c <HAL_RCC_OscConfig+0x4ec>)
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d028      	beq.n	801160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d121      	bne.n	801160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d11a      	bne.n	801160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80115dc:	4013      	ands	r3, r2
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80115e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d111      	bne.n	801160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115f2:	085b      	lsrs	r3, r3, #1
 80115f4:	3b01      	subs	r3, #1
 80115f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d107      	bne.n	801160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011608:	429a      	cmp	r2, r3
 801160a:	d001      	beq.n	8011610 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	e000      	b.n	8011612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3718      	adds	r7, #24
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	40023800 	.word	0x40023800

08011620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d101      	bne.n	8011634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011630:	2301      	movs	r3, #1
 8011632:	e0cc      	b.n	80117ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011634:	4b68      	ldr	r3, [pc, #416]	; (80117d8 <HAL_RCC_ClockConfig+0x1b8>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f003 0307 	and.w	r3, r3, #7
 801163c:	683a      	ldr	r2, [r7, #0]
 801163e:	429a      	cmp	r2, r3
 8011640:	d90c      	bls.n	801165c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011642:	4b65      	ldr	r3, [pc, #404]	; (80117d8 <HAL_RCC_ClockConfig+0x1b8>)
 8011644:	683a      	ldr	r2, [r7, #0]
 8011646:	b2d2      	uxtb	r2, r2
 8011648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801164a:	4b63      	ldr	r3, [pc, #396]	; (80117d8 <HAL_RCC_ClockConfig+0x1b8>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f003 0307 	and.w	r3, r3, #7
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	429a      	cmp	r2, r3
 8011656:	d001      	beq.n	801165c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011658:	2301      	movs	r3, #1
 801165a:	e0b8      	b.n	80117ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f003 0302 	and.w	r3, r3, #2
 8011664:	2b00      	cmp	r3, #0
 8011666:	d020      	beq.n	80116aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f003 0304 	and.w	r3, r3, #4
 8011670:	2b00      	cmp	r3, #0
 8011672:	d005      	beq.n	8011680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011674:	4b59      	ldr	r3, [pc, #356]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 8011676:	689b      	ldr	r3, [r3, #8]
 8011678:	4a58      	ldr	r2, [pc, #352]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 801167a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801167e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f003 0308 	and.w	r3, r3, #8
 8011688:	2b00      	cmp	r3, #0
 801168a:	d005      	beq.n	8011698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801168c:	4b53      	ldr	r3, [pc, #332]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	4a52      	ldr	r2, [pc, #328]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 8011692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011698:	4b50      	ldr	r3, [pc, #320]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 801169a:	689b      	ldr	r3, [r3, #8]
 801169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	689b      	ldr	r3, [r3, #8]
 80116a4:	494d      	ldr	r1, [pc, #308]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 80116a6:	4313      	orrs	r3, r2
 80116a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f003 0301 	and.w	r3, r3, #1
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d044      	beq.n	8011740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	d107      	bne.n	80116ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80116be:	4b47      	ldr	r3, [pc, #284]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d119      	bne.n	80116fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80116ca:	2301      	movs	r3, #1
 80116cc:	e07f      	b.n	80117ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	d003      	beq.n	80116de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80116da:	2b03      	cmp	r3, #3
 80116dc:	d107      	bne.n	80116ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116de:	4b3f      	ldr	r3, [pc, #252]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d109      	bne.n	80116fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80116ea:	2301      	movs	r3, #1
 80116ec:	e06f      	b.n	80117ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116ee:	4b3b      	ldr	r3, [pc, #236]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f003 0302 	and.w	r3, r3, #2
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d101      	bne.n	80116fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80116fa:	2301      	movs	r3, #1
 80116fc:	e067      	b.n	80117ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80116fe:	4b37      	ldr	r3, [pc, #220]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 8011700:	689b      	ldr	r3, [r3, #8]
 8011702:	f023 0203 	bic.w	r2, r3, #3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	4934      	ldr	r1, [pc, #208]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 801170c:	4313      	orrs	r3, r2
 801170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011710:	f7ff fa42 	bl	8010b98 <HAL_GetTick>
 8011714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011716:	e00a      	b.n	801172e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011718:	f7ff fa3e 	bl	8010b98 <HAL_GetTick>
 801171c:	4602      	mov	r2, r0
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	f241 3288 	movw	r2, #5000	; 0x1388
 8011726:	4293      	cmp	r3, r2
 8011728:	d901      	bls.n	801172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801172a:	2303      	movs	r3, #3
 801172c:	e04f      	b.n	80117ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801172e:	4b2b      	ldr	r3, [pc, #172]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 8011730:	689b      	ldr	r3, [r3, #8]
 8011732:	f003 020c 	and.w	r2, r3, #12
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	009b      	lsls	r3, r3, #2
 801173c:	429a      	cmp	r2, r3
 801173e:	d1eb      	bne.n	8011718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011740:	4b25      	ldr	r3, [pc, #148]	; (80117d8 <HAL_RCC_ClockConfig+0x1b8>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f003 0307 	and.w	r3, r3, #7
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	429a      	cmp	r2, r3
 801174c:	d20c      	bcs.n	8011768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801174e:	4b22      	ldr	r3, [pc, #136]	; (80117d8 <HAL_RCC_ClockConfig+0x1b8>)
 8011750:	683a      	ldr	r2, [r7, #0]
 8011752:	b2d2      	uxtb	r2, r2
 8011754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011756:	4b20      	ldr	r3, [pc, #128]	; (80117d8 <HAL_RCC_ClockConfig+0x1b8>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f003 0307 	and.w	r3, r3, #7
 801175e:	683a      	ldr	r2, [r7, #0]
 8011760:	429a      	cmp	r2, r3
 8011762:	d001      	beq.n	8011768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011764:	2301      	movs	r3, #1
 8011766:	e032      	b.n	80117ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f003 0304 	and.w	r3, r3, #4
 8011770:	2b00      	cmp	r3, #0
 8011772:	d008      	beq.n	8011786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011774:	4b19      	ldr	r3, [pc, #100]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 8011776:	689b      	ldr	r3, [r3, #8]
 8011778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	4916      	ldr	r1, [pc, #88]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 8011782:	4313      	orrs	r3, r2
 8011784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f003 0308 	and.w	r3, r3, #8
 801178e:	2b00      	cmp	r3, #0
 8011790:	d009      	beq.n	80117a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011792:	4b12      	ldr	r3, [pc, #72]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	691b      	ldr	r3, [r3, #16]
 801179e:	00db      	lsls	r3, r3, #3
 80117a0:	490e      	ldr	r1, [pc, #56]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 80117a2:	4313      	orrs	r3, r2
 80117a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80117a6:	f000 f821 	bl	80117ec <HAL_RCC_GetSysClockFreq>
 80117aa:	4602      	mov	r2, r0
 80117ac:	4b0b      	ldr	r3, [pc, #44]	; (80117dc <HAL_RCC_ClockConfig+0x1bc>)
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	091b      	lsrs	r3, r3, #4
 80117b2:	f003 030f 	and.w	r3, r3, #15
 80117b6:	490a      	ldr	r1, [pc, #40]	; (80117e0 <HAL_RCC_ClockConfig+0x1c0>)
 80117b8:	5ccb      	ldrb	r3, [r1, r3]
 80117ba:	fa22 f303 	lsr.w	r3, r2, r3
 80117be:	4a09      	ldr	r2, [pc, #36]	; (80117e4 <HAL_RCC_ClockConfig+0x1c4>)
 80117c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80117c2:	4b09      	ldr	r3, [pc, #36]	; (80117e8 <HAL_RCC_ClockConfig+0x1c8>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7ff f9a2 	bl	8010b10 <HAL_InitTick>

  return HAL_OK;
 80117cc:	2300      	movs	r3, #0
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3710      	adds	r7, #16
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	40023c00 	.word	0x40023c00
 80117dc:	40023800 	.word	0x40023800
 80117e0:	08013130 	.word	0x08013130
 80117e4:	20000000 	.word	0x20000000
 80117e8:	20000004 	.word	0x20000004

080117ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80117ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80117f0:	b090      	sub	sp, #64	; 0x40
 80117f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80117f4:	2300      	movs	r3, #0
 80117f6:	637b      	str	r3, [r7, #52]	; 0x34
 80117f8:	2300      	movs	r3, #0
 80117fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117fc:	2300      	movs	r3, #0
 80117fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8011800:	2300      	movs	r3, #0
 8011802:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011804:	4b59      	ldr	r3, [pc, #356]	; (801196c <HAL_RCC_GetSysClockFreq+0x180>)
 8011806:	689b      	ldr	r3, [r3, #8]
 8011808:	f003 030c 	and.w	r3, r3, #12
 801180c:	2b08      	cmp	r3, #8
 801180e:	d00d      	beq.n	801182c <HAL_RCC_GetSysClockFreq+0x40>
 8011810:	2b08      	cmp	r3, #8
 8011812:	f200 80a1 	bhi.w	8011958 <HAL_RCC_GetSysClockFreq+0x16c>
 8011816:	2b00      	cmp	r3, #0
 8011818:	d002      	beq.n	8011820 <HAL_RCC_GetSysClockFreq+0x34>
 801181a:	2b04      	cmp	r3, #4
 801181c:	d003      	beq.n	8011826 <HAL_RCC_GetSysClockFreq+0x3a>
 801181e:	e09b      	b.n	8011958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011820:	4b53      	ldr	r3, [pc, #332]	; (8011970 <HAL_RCC_GetSysClockFreq+0x184>)
 8011822:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8011824:	e09b      	b.n	801195e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011826:	4b53      	ldr	r3, [pc, #332]	; (8011974 <HAL_RCC_GetSysClockFreq+0x188>)
 8011828:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801182a:	e098      	b.n	801195e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801182c:	4b4f      	ldr	r3, [pc, #316]	; (801196c <HAL_RCC_GetSysClockFreq+0x180>)
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011834:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011836:	4b4d      	ldr	r3, [pc, #308]	; (801196c <HAL_RCC_GetSysClockFreq+0x180>)
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801183e:	2b00      	cmp	r3, #0
 8011840:	d028      	beq.n	8011894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011842:	4b4a      	ldr	r3, [pc, #296]	; (801196c <HAL_RCC_GetSysClockFreq+0x180>)
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	099b      	lsrs	r3, r3, #6
 8011848:	2200      	movs	r2, #0
 801184a:	623b      	str	r3, [r7, #32]
 801184c:	627a      	str	r2, [r7, #36]	; 0x24
 801184e:	6a3b      	ldr	r3, [r7, #32]
 8011850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8011854:	2100      	movs	r1, #0
 8011856:	4b47      	ldr	r3, [pc, #284]	; (8011974 <HAL_RCC_GetSysClockFreq+0x188>)
 8011858:	fb03 f201 	mul.w	r2, r3, r1
 801185c:	2300      	movs	r3, #0
 801185e:	fb00 f303 	mul.w	r3, r0, r3
 8011862:	4413      	add	r3, r2
 8011864:	4a43      	ldr	r2, [pc, #268]	; (8011974 <HAL_RCC_GetSysClockFreq+0x188>)
 8011866:	fba0 1202 	umull	r1, r2, r0, r2
 801186a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801186c:	460a      	mov	r2, r1
 801186e:	62ba      	str	r2, [r7, #40]	; 0x28
 8011870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011872:	4413      	add	r3, r2
 8011874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011878:	2200      	movs	r2, #0
 801187a:	61bb      	str	r3, [r7, #24]
 801187c:	61fa      	str	r2, [r7, #28]
 801187e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011886:	f7fe fcf3 	bl	8010270 <__aeabi_uldivmod>
 801188a:	4602      	mov	r2, r0
 801188c:	460b      	mov	r3, r1
 801188e:	4613      	mov	r3, r2
 8011890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011892:	e053      	b.n	801193c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011894:	4b35      	ldr	r3, [pc, #212]	; (801196c <HAL_RCC_GetSysClockFreq+0x180>)
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	099b      	lsrs	r3, r3, #6
 801189a:	2200      	movs	r2, #0
 801189c:	613b      	str	r3, [r7, #16]
 801189e:	617a      	str	r2, [r7, #20]
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80118a6:	f04f 0b00 	mov.w	fp, #0
 80118aa:	4652      	mov	r2, sl
 80118ac:	465b      	mov	r3, fp
 80118ae:	f04f 0000 	mov.w	r0, #0
 80118b2:	f04f 0100 	mov.w	r1, #0
 80118b6:	0159      	lsls	r1, r3, #5
 80118b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80118bc:	0150      	lsls	r0, r2, #5
 80118be:	4602      	mov	r2, r0
 80118c0:	460b      	mov	r3, r1
 80118c2:	ebb2 080a 	subs.w	r8, r2, sl
 80118c6:	eb63 090b 	sbc.w	r9, r3, fp
 80118ca:	f04f 0200 	mov.w	r2, #0
 80118ce:	f04f 0300 	mov.w	r3, #0
 80118d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80118d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80118da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80118de:	ebb2 0408 	subs.w	r4, r2, r8
 80118e2:	eb63 0509 	sbc.w	r5, r3, r9
 80118e6:	f04f 0200 	mov.w	r2, #0
 80118ea:	f04f 0300 	mov.w	r3, #0
 80118ee:	00eb      	lsls	r3, r5, #3
 80118f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80118f4:	00e2      	lsls	r2, r4, #3
 80118f6:	4614      	mov	r4, r2
 80118f8:	461d      	mov	r5, r3
 80118fa:	eb14 030a 	adds.w	r3, r4, sl
 80118fe:	603b      	str	r3, [r7, #0]
 8011900:	eb45 030b 	adc.w	r3, r5, fp
 8011904:	607b      	str	r3, [r7, #4]
 8011906:	f04f 0200 	mov.w	r2, #0
 801190a:	f04f 0300 	mov.w	r3, #0
 801190e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011912:	4629      	mov	r1, r5
 8011914:	028b      	lsls	r3, r1, #10
 8011916:	4621      	mov	r1, r4
 8011918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801191c:	4621      	mov	r1, r4
 801191e:	028a      	lsls	r2, r1, #10
 8011920:	4610      	mov	r0, r2
 8011922:	4619      	mov	r1, r3
 8011924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011926:	2200      	movs	r2, #0
 8011928:	60bb      	str	r3, [r7, #8]
 801192a:	60fa      	str	r2, [r7, #12]
 801192c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011930:	f7fe fc9e 	bl	8010270 <__aeabi_uldivmod>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	4613      	mov	r3, r2
 801193a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801193c:	4b0b      	ldr	r3, [pc, #44]	; (801196c <HAL_RCC_GetSysClockFreq+0x180>)
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	0c1b      	lsrs	r3, r3, #16
 8011942:	f003 0303 	and.w	r3, r3, #3
 8011946:	3301      	adds	r3, #1
 8011948:	005b      	lsls	r3, r3, #1
 801194a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 801194c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011950:	fbb2 f3f3 	udiv	r3, r2, r3
 8011954:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8011956:	e002      	b.n	801195e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011958:	4b05      	ldr	r3, [pc, #20]	; (8011970 <HAL_RCC_GetSysClockFreq+0x184>)
 801195a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801195c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8011960:	4618      	mov	r0, r3
 8011962:	3740      	adds	r7, #64	; 0x40
 8011964:	46bd      	mov	sp, r7
 8011966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801196a:	bf00      	nop
 801196c:	40023800 	.word	0x40023800
 8011970:	00f42400 	.word	0x00f42400
 8011974:	017d7840 	.word	0x017d7840

08011978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011978:	b480      	push	{r7}
 801197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801197c:	4b03      	ldr	r3, [pc, #12]	; (801198c <HAL_RCC_GetHCLKFreq+0x14>)
 801197e:	681b      	ldr	r3, [r3, #0]
}
 8011980:	4618      	mov	r0, r3
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop
 801198c:	20000000 	.word	0x20000000

08011990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011994:	f7ff fff0 	bl	8011978 <HAL_RCC_GetHCLKFreq>
 8011998:	4602      	mov	r2, r0
 801199a:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 801199c:	689b      	ldr	r3, [r3, #8]
 801199e:	0a9b      	lsrs	r3, r3, #10
 80119a0:	f003 0307 	and.w	r3, r3, #7
 80119a4:	4903      	ldr	r1, [pc, #12]	; (80119b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80119a6:	5ccb      	ldrb	r3, [r1, r3]
 80119a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	40023800 	.word	0x40023800
 80119b4:	08013140 	.word	0x08013140

080119b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80119bc:	f7ff ffdc 	bl	8011978 <HAL_RCC_GetHCLKFreq>
 80119c0:	4602      	mov	r2, r0
 80119c2:	4b05      	ldr	r3, [pc, #20]	; (80119d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80119c4:	689b      	ldr	r3, [r3, #8]
 80119c6:	0b5b      	lsrs	r3, r3, #13
 80119c8:	f003 0307 	and.w	r3, r3, #7
 80119cc:	4903      	ldr	r1, [pc, #12]	; (80119dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80119ce:	5ccb      	ldrb	r3, [r1, r3]
 80119d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	40023800 	.word	0x40023800
 80119dc:	08013140 	.word	0x08013140

080119e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80119ee:	2301      	movs	r3, #1
 80119f0:	e03f      	b.n	8011a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d106      	bne.n	8011a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7fe ff26 	bl	8010858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2224      	movs	r2, #36	; 0x24
 8011a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	68da      	ldr	r2, [r3, #12]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f000 f929 	bl	8011c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	691a      	ldr	r2, [r3, #16]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	695a      	ldr	r2, [r3, #20]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	68da      	ldr	r2, [r3, #12]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2220      	movs	r2, #32
 8011a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2220      	movs	r2, #32
 8011a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8011a70:	2300      	movs	r3, #0
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b08a      	sub	sp, #40	; 0x28
 8011a7e:	af02      	add	r7, sp, #8
 8011a80:	60f8      	str	r0, [r7, #12]
 8011a82:	60b9      	str	r1, [r7, #8]
 8011a84:	603b      	str	r3, [r7, #0]
 8011a86:	4613      	mov	r3, r2
 8011a88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	2b20      	cmp	r3, #32
 8011a98:	d17c      	bne.n	8011b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d002      	beq.n	8011aa6 <HAL_UART_Transmit+0x2c>
 8011aa0:	88fb      	ldrh	r3, [r7, #6]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d101      	bne.n	8011aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e075      	b.n	8011b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d101      	bne.n	8011ab8 <HAL_UART_Transmit+0x3e>
 8011ab4:	2302      	movs	r3, #2
 8011ab6:	e06e      	b.n	8011b96 <HAL_UART_Transmit+0x11c>
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2201      	movs	r2, #1
 8011abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	2221      	movs	r2, #33	; 0x21
 8011aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011ace:	f7ff f863 	bl	8010b98 <HAL_GetTick>
 8011ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	88fa      	ldrh	r2, [r7, #6]
 8011ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	88fa      	ldrh	r2, [r7, #6]
 8011ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	689b      	ldr	r3, [r3, #8]
 8011ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ae8:	d108      	bne.n	8011afc <HAL_UART_Transmit+0x82>
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	691b      	ldr	r3, [r3, #16]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d104      	bne.n	8011afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011af2:	2300      	movs	r3, #0
 8011af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	61bb      	str	r3, [r7, #24]
 8011afa:	e003      	b.n	8011b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011b00:	2300      	movs	r3, #0
 8011b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2200      	movs	r2, #0
 8011b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011b0c:	e02a      	b.n	8011b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	9300      	str	r3, [sp, #0]
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	2200      	movs	r2, #0
 8011b16:	2180      	movs	r1, #128	; 0x80
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f000 f840 	bl	8011b9e <UART_WaitOnFlagUntilTimeout>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011b24:	2303      	movs	r3, #3
 8011b26:	e036      	b.n	8011b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10b      	bne.n	8011b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	881b      	ldrh	r3, [r3, #0]
 8011b32:	461a      	mov	r2, r3
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	3302      	adds	r3, #2
 8011b42:	61bb      	str	r3, [r7, #24]
 8011b44:	e007      	b.n	8011b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	781a      	ldrb	r2, [r3, #0]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	3301      	adds	r3, #1
 8011b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	3b01      	subs	r3, #1
 8011b5e:	b29a      	uxth	r2, r3
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1cf      	bne.n	8011b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	2200      	movs	r2, #0
 8011b76:	2140      	movs	r1, #64	; 0x40
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	f000 f810 	bl	8011b9e <UART_WaitOnFlagUntilTimeout>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d001      	beq.n	8011b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011b84:	2303      	movs	r3, #3
 8011b86:	e006      	b.n	8011b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2220      	movs	r2, #32
 8011b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011b90:	2300      	movs	r3, #0
 8011b92:	e000      	b.n	8011b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8011b94:	2302      	movs	r3, #2
  }
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3720      	adds	r7, #32
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b090      	sub	sp, #64	; 0x40
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	60f8      	str	r0, [r7, #12]
 8011ba6:	60b9      	str	r1, [r7, #8]
 8011ba8:	603b      	str	r3, [r7, #0]
 8011baa:	4613      	mov	r3, r2
 8011bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bae:	e050      	b.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb6:	d04c      	beq.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d007      	beq.n	8011bce <UART_WaitOnFlagUntilTimeout+0x30>
 8011bbe:	f7fe ffeb 	bl	8010b98 <HAL_GetTick>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	1ad3      	subs	r3, r2, r3
 8011bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d241      	bcs.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	330c      	adds	r3, #12
 8011bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd8:	e853 3f00 	ldrex	r3, [r3]
 8011bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	330c      	adds	r3, #12
 8011bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bee:	637a      	str	r2, [r7, #52]	; 0x34
 8011bf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bf6:	e841 2300 	strex	r3, r2, [r1]
 8011bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d1e5      	bne.n	8011bce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3314      	adds	r3, #20
 8011c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	e853 3f00 	ldrex	r3, [r3]
 8011c10:	613b      	str	r3, [r7, #16]
   return(result);
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	f023 0301 	bic.w	r3, r3, #1
 8011c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	3314      	adds	r3, #20
 8011c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c22:	623a      	str	r2, [r7, #32]
 8011c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c26:	69f9      	ldr	r1, [r7, #28]
 8011c28:	6a3a      	ldr	r2, [r7, #32]
 8011c2a:	e841 2300 	strex	r3, r2, [r1]
 8011c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011c30:	69bb      	ldr	r3, [r7, #24]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d1e5      	bne.n	8011c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2220      	movs	r2, #32
 8011c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2220      	movs	r2, #32
 8011c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011c4e:	2303      	movs	r3, #3
 8011c50:	e00f      	b.n	8011c72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	4013      	ands	r3, r2
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	bf0c      	ite	eq
 8011c62:	2301      	moveq	r3, #1
 8011c64:	2300      	movne	r3, #0
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	461a      	mov	r2, r3
 8011c6a:	79fb      	ldrb	r3, [r7, #7]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d09f      	beq.n	8011bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3740      	adds	r7, #64	; 0x40
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
	...

08011c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c80:	b0c0      	sub	sp, #256	; 0x100
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	691b      	ldr	r3, [r3, #16]
 8011c90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c98:	68d9      	ldr	r1, [r3, #12]
 8011c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	ea40 0301 	orr.w	r3, r0, r1
 8011ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011caa:	689a      	ldr	r2, [r3, #8]
 8011cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cb0:	691b      	ldr	r3, [r3, #16]
 8011cb2:	431a      	orrs	r2, r3
 8011cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cb8:	695b      	ldr	r3, [r3, #20]
 8011cba:	431a      	orrs	r2, r3
 8011cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cc0:	69db      	ldr	r3, [r3, #28]
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011cd4:	f021 010c 	bic.w	r1, r1, #12
 8011cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011ce2:	430b      	orrs	r3, r1
 8011ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	695b      	ldr	r3, [r3, #20]
 8011cee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cf6:	6999      	ldr	r1, [r3, #24]
 8011cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	ea40 0301 	orr.w	r3, r0, r1
 8011d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d08:	681a      	ldr	r2, [r3, #0]
 8011d0a:	4b8f      	ldr	r3, [pc, #572]	; (8011f48 <UART_SetConfig+0x2cc>)
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d005      	beq.n	8011d1c <UART_SetConfig+0xa0>
 8011d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	4b8d      	ldr	r3, [pc, #564]	; (8011f4c <UART_SetConfig+0x2d0>)
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d104      	bne.n	8011d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011d1c:	f7ff fe4c 	bl	80119b8 <HAL_RCC_GetPCLK2Freq>
 8011d20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8011d24:	e003      	b.n	8011d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011d26:	f7ff fe33 	bl	8011990 <HAL_RCC_GetPCLK1Freq>
 8011d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d32:	69db      	ldr	r3, [r3, #28]
 8011d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d38:	f040 810c 	bne.w	8011f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d40:	2200      	movs	r2, #0
 8011d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011d46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8011d4e:	4622      	mov	r2, r4
 8011d50:	462b      	mov	r3, r5
 8011d52:	1891      	adds	r1, r2, r2
 8011d54:	65b9      	str	r1, [r7, #88]	; 0x58
 8011d56:	415b      	adcs	r3, r3
 8011d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011d5e:	4621      	mov	r1, r4
 8011d60:	eb12 0801 	adds.w	r8, r2, r1
 8011d64:	4629      	mov	r1, r5
 8011d66:	eb43 0901 	adc.w	r9, r3, r1
 8011d6a:	f04f 0200 	mov.w	r2, #0
 8011d6e:	f04f 0300 	mov.w	r3, #0
 8011d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011d7e:	4690      	mov	r8, r2
 8011d80:	4699      	mov	r9, r3
 8011d82:	4623      	mov	r3, r4
 8011d84:	eb18 0303 	adds.w	r3, r8, r3
 8011d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011d8c:	462b      	mov	r3, r5
 8011d8e:	eb49 0303 	adc.w	r3, r9, r3
 8011d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011da2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011daa:	460b      	mov	r3, r1
 8011dac:	18db      	adds	r3, r3, r3
 8011dae:	653b      	str	r3, [r7, #80]	; 0x50
 8011db0:	4613      	mov	r3, r2
 8011db2:	eb42 0303 	adc.w	r3, r2, r3
 8011db6:	657b      	str	r3, [r7, #84]	; 0x54
 8011db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8011dc0:	f7fe fa56 	bl	8010270 <__aeabi_uldivmod>
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	4b61      	ldr	r3, [pc, #388]	; (8011f50 <UART_SetConfig+0x2d4>)
 8011dca:	fba3 2302 	umull	r2, r3, r3, r2
 8011dce:	095b      	lsrs	r3, r3, #5
 8011dd0:	011c      	lsls	r4, r3, #4
 8011dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8011de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8011de4:	4642      	mov	r2, r8
 8011de6:	464b      	mov	r3, r9
 8011de8:	1891      	adds	r1, r2, r2
 8011dea:	64b9      	str	r1, [r7, #72]	; 0x48
 8011dec:	415b      	adcs	r3, r3
 8011dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011df4:	4641      	mov	r1, r8
 8011df6:	eb12 0a01 	adds.w	sl, r2, r1
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8011e00:	f04f 0200 	mov.w	r2, #0
 8011e04:	f04f 0300 	mov.w	r3, #0
 8011e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011e14:	4692      	mov	sl, r2
 8011e16:	469b      	mov	fp, r3
 8011e18:	4643      	mov	r3, r8
 8011e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8011e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011e22:	464b      	mov	r3, r9
 8011e24:	eb4b 0303 	adc.w	r3, fp, r3
 8011e28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	2200      	movs	r2, #0
 8011e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011e38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011e40:	460b      	mov	r3, r1
 8011e42:	18db      	adds	r3, r3, r3
 8011e44:	643b      	str	r3, [r7, #64]	; 0x40
 8011e46:	4613      	mov	r3, r2
 8011e48:	eb42 0303 	adc.w	r3, r2, r3
 8011e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8011e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011e56:	f7fe fa0b 	bl	8010270 <__aeabi_uldivmod>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	4611      	mov	r1, r2
 8011e60:	4b3b      	ldr	r3, [pc, #236]	; (8011f50 <UART_SetConfig+0x2d4>)
 8011e62:	fba3 2301 	umull	r2, r3, r3, r1
 8011e66:	095b      	lsrs	r3, r3, #5
 8011e68:	2264      	movs	r2, #100	; 0x64
 8011e6a:	fb02 f303 	mul.w	r3, r2, r3
 8011e6e:	1acb      	subs	r3, r1, r3
 8011e70:	00db      	lsls	r3, r3, #3
 8011e72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011e76:	4b36      	ldr	r3, [pc, #216]	; (8011f50 <UART_SetConfig+0x2d4>)
 8011e78:	fba3 2302 	umull	r2, r3, r3, r2
 8011e7c:	095b      	lsrs	r3, r3, #5
 8011e7e:	005b      	lsls	r3, r3, #1
 8011e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011e84:	441c      	add	r4, r3
 8011e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011e90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011e98:	4642      	mov	r2, r8
 8011e9a:	464b      	mov	r3, r9
 8011e9c:	1891      	adds	r1, r2, r2
 8011e9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8011ea0:	415b      	adcs	r3, r3
 8011ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011ea8:	4641      	mov	r1, r8
 8011eaa:	1851      	adds	r1, r2, r1
 8011eac:	6339      	str	r1, [r7, #48]	; 0x30
 8011eae:	4649      	mov	r1, r9
 8011eb0:	414b      	adcs	r3, r1
 8011eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8011eb4:	f04f 0200 	mov.w	r2, #0
 8011eb8:	f04f 0300 	mov.w	r3, #0
 8011ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8011ec0:	4659      	mov	r1, fp
 8011ec2:	00cb      	lsls	r3, r1, #3
 8011ec4:	4651      	mov	r1, sl
 8011ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011eca:	4651      	mov	r1, sl
 8011ecc:	00ca      	lsls	r2, r1, #3
 8011ece:	4610      	mov	r0, r2
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	4642      	mov	r2, r8
 8011ed6:	189b      	adds	r3, r3, r2
 8011ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011edc:	464b      	mov	r3, r9
 8011ede:	460a      	mov	r2, r1
 8011ee0:	eb42 0303 	adc.w	r3, r2, r3
 8011ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8011efc:	460b      	mov	r3, r1
 8011efe:	18db      	adds	r3, r3, r3
 8011f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f02:	4613      	mov	r3, r2
 8011f04:	eb42 0303 	adc.w	r3, r2, r3
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011f12:	f7fe f9ad 	bl	8010270 <__aeabi_uldivmod>
 8011f16:	4602      	mov	r2, r0
 8011f18:	460b      	mov	r3, r1
 8011f1a:	4b0d      	ldr	r3, [pc, #52]	; (8011f50 <UART_SetConfig+0x2d4>)
 8011f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8011f20:	095b      	lsrs	r3, r3, #5
 8011f22:	2164      	movs	r1, #100	; 0x64
 8011f24:	fb01 f303 	mul.w	r3, r1, r3
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	00db      	lsls	r3, r3, #3
 8011f2c:	3332      	adds	r3, #50	; 0x32
 8011f2e:	4a08      	ldr	r2, [pc, #32]	; (8011f50 <UART_SetConfig+0x2d4>)
 8011f30:	fba2 2303 	umull	r2, r3, r2, r3
 8011f34:	095b      	lsrs	r3, r3, #5
 8011f36:	f003 0207 	and.w	r2, r3, #7
 8011f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	4422      	add	r2, r4
 8011f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011f44:	e105      	b.n	8012152 <UART_SetConfig+0x4d6>
 8011f46:	bf00      	nop
 8011f48:	40011000 	.word	0x40011000
 8011f4c:	40011400 	.word	0x40011400
 8011f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011f66:	4642      	mov	r2, r8
 8011f68:	464b      	mov	r3, r9
 8011f6a:	1891      	adds	r1, r2, r2
 8011f6c:	6239      	str	r1, [r7, #32]
 8011f6e:	415b      	adcs	r3, r3
 8011f70:	627b      	str	r3, [r7, #36]	; 0x24
 8011f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011f76:	4641      	mov	r1, r8
 8011f78:	1854      	adds	r4, r2, r1
 8011f7a:	4649      	mov	r1, r9
 8011f7c:	eb43 0501 	adc.w	r5, r3, r1
 8011f80:	f04f 0200 	mov.w	r2, #0
 8011f84:	f04f 0300 	mov.w	r3, #0
 8011f88:	00eb      	lsls	r3, r5, #3
 8011f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011f8e:	00e2      	lsls	r2, r4, #3
 8011f90:	4614      	mov	r4, r2
 8011f92:	461d      	mov	r5, r3
 8011f94:	4643      	mov	r3, r8
 8011f96:	18e3      	adds	r3, r4, r3
 8011f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f9c:	464b      	mov	r3, r9
 8011f9e:	eb45 0303 	adc.w	r3, r5, r3
 8011fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	2200      	movs	r2, #0
 8011fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011fb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011fb6:	f04f 0200 	mov.w	r2, #0
 8011fba:	f04f 0300 	mov.w	r3, #0
 8011fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011fc2:	4629      	mov	r1, r5
 8011fc4:	008b      	lsls	r3, r1, #2
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011fcc:	4621      	mov	r1, r4
 8011fce:	008a      	lsls	r2, r1, #2
 8011fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011fd4:	f7fe f94c 	bl	8010270 <__aeabi_uldivmod>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4b60      	ldr	r3, [pc, #384]	; (8012160 <UART_SetConfig+0x4e4>)
 8011fde:	fba3 2302 	umull	r2, r3, r3, r2
 8011fe2:	095b      	lsrs	r3, r3, #5
 8011fe4:	011c      	lsls	r4, r3, #4
 8011fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011fea:	2200      	movs	r2, #0
 8011fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011ff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8011ff8:	4642      	mov	r2, r8
 8011ffa:	464b      	mov	r3, r9
 8011ffc:	1891      	adds	r1, r2, r2
 8011ffe:	61b9      	str	r1, [r7, #24]
 8012000:	415b      	adcs	r3, r3
 8012002:	61fb      	str	r3, [r7, #28]
 8012004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012008:	4641      	mov	r1, r8
 801200a:	1851      	adds	r1, r2, r1
 801200c:	6139      	str	r1, [r7, #16]
 801200e:	4649      	mov	r1, r9
 8012010:	414b      	adcs	r3, r1
 8012012:	617b      	str	r3, [r7, #20]
 8012014:	f04f 0200 	mov.w	r2, #0
 8012018:	f04f 0300 	mov.w	r3, #0
 801201c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012020:	4659      	mov	r1, fp
 8012022:	00cb      	lsls	r3, r1, #3
 8012024:	4651      	mov	r1, sl
 8012026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801202a:	4651      	mov	r1, sl
 801202c:	00ca      	lsls	r2, r1, #3
 801202e:	4610      	mov	r0, r2
 8012030:	4619      	mov	r1, r3
 8012032:	4603      	mov	r3, r0
 8012034:	4642      	mov	r2, r8
 8012036:	189b      	adds	r3, r3, r2
 8012038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801203c:	464b      	mov	r3, r9
 801203e:	460a      	mov	r2, r1
 8012040:	eb42 0303 	adc.w	r3, r2, r3
 8012044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	67bb      	str	r3, [r7, #120]	; 0x78
 8012052:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012054:	f04f 0200 	mov.w	r2, #0
 8012058:	f04f 0300 	mov.w	r3, #0
 801205c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8012060:	4649      	mov	r1, r9
 8012062:	008b      	lsls	r3, r1, #2
 8012064:	4641      	mov	r1, r8
 8012066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801206a:	4641      	mov	r1, r8
 801206c:	008a      	lsls	r2, r1, #2
 801206e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8012072:	f7fe f8fd 	bl	8010270 <__aeabi_uldivmod>
 8012076:	4602      	mov	r2, r0
 8012078:	460b      	mov	r3, r1
 801207a:	4b39      	ldr	r3, [pc, #228]	; (8012160 <UART_SetConfig+0x4e4>)
 801207c:	fba3 1302 	umull	r1, r3, r3, r2
 8012080:	095b      	lsrs	r3, r3, #5
 8012082:	2164      	movs	r1, #100	; 0x64
 8012084:	fb01 f303 	mul.w	r3, r1, r3
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	011b      	lsls	r3, r3, #4
 801208c:	3332      	adds	r3, #50	; 0x32
 801208e:	4a34      	ldr	r2, [pc, #208]	; (8012160 <UART_SetConfig+0x4e4>)
 8012090:	fba2 2303 	umull	r2, r3, r2, r3
 8012094:	095b      	lsrs	r3, r3, #5
 8012096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801209a:	441c      	add	r4, r3
 801209c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80120a0:	2200      	movs	r2, #0
 80120a2:	673b      	str	r3, [r7, #112]	; 0x70
 80120a4:	677a      	str	r2, [r7, #116]	; 0x74
 80120a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80120aa:	4642      	mov	r2, r8
 80120ac:	464b      	mov	r3, r9
 80120ae:	1891      	adds	r1, r2, r2
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	415b      	adcs	r3, r3
 80120b4:	60fb      	str	r3, [r7, #12]
 80120b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80120ba:	4641      	mov	r1, r8
 80120bc:	1851      	adds	r1, r2, r1
 80120be:	6039      	str	r1, [r7, #0]
 80120c0:	4649      	mov	r1, r9
 80120c2:	414b      	adcs	r3, r1
 80120c4:	607b      	str	r3, [r7, #4]
 80120c6:	f04f 0200 	mov.w	r2, #0
 80120ca:	f04f 0300 	mov.w	r3, #0
 80120ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80120d2:	4659      	mov	r1, fp
 80120d4:	00cb      	lsls	r3, r1, #3
 80120d6:	4651      	mov	r1, sl
 80120d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80120dc:	4651      	mov	r1, sl
 80120de:	00ca      	lsls	r2, r1, #3
 80120e0:	4610      	mov	r0, r2
 80120e2:	4619      	mov	r1, r3
 80120e4:	4603      	mov	r3, r0
 80120e6:	4642      	mov	r2, r8
 80120e8:	189b      	adds	r3, r3, r2
 80120ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80120ec:	464b      	mov	r3, r9
 80120ee:	460a      	mov	r2, r1
 80120f0:	eb42 0303 	adc.w	r3, r2, r3
 80120f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80120f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	2200      	movs	r2, #0
 80120fe:	663b      	str	r3, [r7, #96]	; 0x60
 8012100:	667a      	str	r2, [r7, #100]	; 0x64
 8012102:	f04f 0200 	mov.w	r2, #0
 8012106:	f04f 0300 	mov.w	r3, #0
 801210a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801210e:	4649      	mov	r1, r9
 8012110:	008b      	lsls	r3, r1, #2
 8012112:	4641      	mov	r1, r8
 8012114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012118:	4641      	mov	r1, r8
 801211a:	008a      	lsls	r2, r1, #2
 801211c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8012120:	f7fe f8a6 	bl	8010270 <__aeabi_uldivmod>
 8012124:	4602      	mov	r2, r0
 8012126:	460b      	mov	r3, r1
 8012128:	4b0d      	ldr	r3, [pc, #52]	; (8012160 <UART_SetConfig+0x4e4>)
 801212a:	fba3 1302 	umull	r1, r3, r3, r2
 801212e:	095b      	lsrs	r3, r3, #5
 8012130:	2164      	movs	r1, #100	; 0x64
 8012132:	fb01 f303 	mul.w	r3, r1, r3
 8012136:	1ad3      	subs	r3, r2, r3
 8012138:	011b      	lsls	r3, r3, #4
 801213a:	3332      	adds	r3, #50	; 0x32
 801213c:	4a08      	ldr	r2, [pc, #32]	; (8012160 <UART_SetConfig+0x4e4>)
 801213e:	fba2 2303 	umull	r2, r3, r2, r3
 8012142:	095b      	lsrs	r3, r3, #5
 8012144:	f003 020f 	and.w	r2, r3, #15
 8012148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	4422      	add	r2, r4
 8012150:	609a      	str	r2, [r3, #8]
}
 8012152:	bf00      	nop
 8012154:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012158:	46bd      	mov	sp, r7
 801215a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801215e:	bf00      	nop
 8012160:	51eb851f 	.word	0x51eb851f

08012164 <__errno>:
 8012164:	4b01      	ldr	r3, [pc, #4]	; (801216c <__errno+0x8>)
 8012166:	6818      	ldr	r0, [r3, #0]
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	2000000c 	.word	0x2000000c

08012170 <__libc_init_array>:
 8012170:	b570      	push	{r4, r5, r6, lr}
 8012172:	4d0d      	ldr	r5, [pc, #52]	; (80121a8 <__libc_init_array+0x38>)
 8012174:	4c0d      	ldr	r4, [pc, #52]	; (80121ac <__libc_init_array+0x3c>)
 8012176:	1b64      	subs	r4, r4, r5
 8012178:	10a4      	asrs	r4, r4, #2
 801217a:	2600      	movs	r6, #0
 801217c:	42a6      	cmp	r6, r4
 801217e:	d109      	bne.n	8012194 <__libc_init_array+0x24>
 8012180:	4d0b      	ldr	r5, [pc, #44]	; (80121b0 <__libc_init_array+0x40>)
 8012182:	4c0c      	ldr	r4, [pc, #48]	; (80121b4 <__libc_init_array+0x44>)
 8012184:	f000 ffae 	bl	80130e4 <_init>
 8012188:	1b64      	subs	r4, r4, r5
 801218a:	10a4      	asrs	r4, r4, #2
 801218c:	2600      	movs	r6, #0
 801218e:	42a6      	cmp	r6, r4
 8012190:	d105      	bne.n	801219e <__libc_init_array+0x2e>
 8012192:	bd70      	pop	{r4, r5, r6, pc}
 8012194:	f855 3b04 	ldr.w	r3, [r5], #4
 8012198:	4798      	blx	r3
 801219a:	3601      	adds	r6, #1
 801219c:	e7ee      	b.n	801217c <__libc_init_array+0xc>
 801219e:	f855 3b04 	ldr.w	r3, [r5], #4
 80121a2:	4798      	blx	r3
 80121a4:	3601      	adds	r6, #1
 80121a6:	e7f2      	b.n	801218e <__libc_init_array+0x1e>
 80121a8:	080131e8 	.word	0x080131e8
 80121ac:	080131e8 	.word	0x080131e8
 80121b0:	080131e8 	.word	0x080131e8
 80121b4:	080131ec 	.word	0x080131ec

080121b8 <memset>:
 80121b8:	4402      	add	r2, r0
 80121ba:	4603      	mov	r3, r0
 80121bc:	4293      	cmp	r3, r2
 80121be:	d100      	bne.n	80121c2 <memset+0xa>
 80121c0:	4770      	bx	lr
 80121c2:	f803 1b01 	strb.w	r1, [r3], #1
 80121c6:	e7f9      	b.n	80121bc <memset+0x4>

080121c8 <iprintf>:
 80121c8:	b40f      	push	{r0, r1, r2, r3}
 80121ca:	4b0a      	ldr	r3, [pc, #40]	; (80121f4 <iprintf+0x2c>)
 80121cc:	b513      	push	{r0, r1, r4, lr}
 80121ce:	681c      	ldr	r4, [r3, #0]
 80121d0:	b124      	cbz	r4, 80121dc <iprintf+0x14>
 80121d2:	69a3      	ldr	r3, [r4, #24]
 80121d4:	b913      	cbnz	r3, 80121dc <iprintf+0x14>
 80121d6:	4620      	mov	r0, r4
 80121d8:	f000 f866 	bl	80122a8 <__sinit>
 80121dc:	ab05      	add	r3, sp, #20
 80121de:	9a04      	ldr	r2, [sp, #16]
 80121e0:	68a1      	ldr	r1, [r4, #8]
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	4620      	mov	r0, r4
 80121e6:	f000 f9bd 	bl	8012564 <_vfiprintf_r>
 80121ea:	b002      	add	sp, #8
 80121ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121f0:	b004      	add	sp, #16
 80121f2:	4770      	bx	lr
 80121f4:	2000000c 	.word	0x2000000c

080121f8 <std>:
 80121f8:	2300      	movs	r3, #0
 80121fa:	b510      	push	{r4, lr}
 80121fc:	4604      	mov	r4, r0
 80121fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012206:	6083      	str	r3, [r0, #8]
 8012208:	8181      	strh	r1, [r0, #12]
 801220a:	6643      	str	r3, [r0, #100]	; 0x64
 801220c:	81c2      	strh	r2, [r0, #14]
 801220e:	6183      	str	r3, [r0, #24]
 8012210:	4619      	mov	r1, r3
 8012212:	2208      	movs	r2, #8
 8012214:	305c      	adds	r0, #92	; 0x5c
 8012216:	f7ff ffcf 	bl	80121b8 <memset>
 801221a:	4b05      	ldr	r3, [pc, #20]	; (8012230 <std+0x38>)
 801221c:	6263      	str	r3, [r4, #36]	; 0x24
 801221e:	4b05      	ldr	r3, [pc, #20]	; (8012234 <std+0x3c>)
 8012220:	62a3      	str	r3, [r4, #40]	; 0x28
 8012222:	4b05      	ldr	r3, [pc, #20]	; (8012238 <std+0x40>)
 8012224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012226:	4b05      	ldr	r3, [pc, #20]	; (801223c <std+0x44>)
 8012228:	6224      	str	r4, [r4, #32]
 801222a:	6323      	str	r3, [r4, #48]	; 0x30
 801222c:	bd10      	pop	{r4, pc}
 801222e:	bf00      	nop
 8012230:	08012b0d 	.word	0x08012b0d
 8012234:	08012b2f 	.word	0x08012b2f
 8012238:	08012b67 	.word	0x08012b67
 801223c:	08012b8b 	.word	0x08012b8b

08012240 <_cleanup_r>:
 8012240:	4901      	ldr	r1, [pc, #4]	; (8012248 <_cleanup_r+0x8>)
 8012242:	f000 b8af 	b.w	80123a4 <_fwalk_reent>
 8012246:	bf00      	nop
 8012248:	08012e65 	.word	0x08012e65

0801224c <__sfmoreglue>:
 801224c:	b570      	push	{r4, r5, r6, lr}
 801224e:	2268      	movs	r2, #104	; 0x68
 8012250:	1e4d      	subs	r5, r1, #1
 8012252:	4355      	muls	r5, r2
 8012254:	460e      	mov	r6, r1
 8012256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801225a:	f000 f8e5 	bl	8012428 <_malloc_r>
 801225e:	4604      	mov	r4, r0
 8012260:	b140      	cbz	r0, 8012274 <__sfmoreglue+0x28>
 8012262:	2100      	movs	r1, #0
 8012264:	e9c0 1600 	strd	r1, r6, [r0]
 8012268:	300c      	adds	r0, #12
 801226a:	60a0      	str	r0, [r4, #8]
 801226c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012270:	f7ff ffa2 	bl	80121b8 <memset>
 8012274:	4620      	mov	r0, r4
 8012276:	bd70      	pop	{r4, r5, r6, pc}

08012278 <__sfp_lock_acquire>:
 8012278:	4801      	ldr	r0, [pc, #4]	; (8012280 <__sfp_lock_acquire+0x8>)
 801227a:	f000 b8b3 	b.w	80123e4 <__retarget_lock_acquire_recursive>
 801227e:	bf00      	nop
 8012280:	200000d9 	.word	0x200000d9

08012284 <__sfp_lock_release>:
 8012284:	4801      	ldr	r0, [pc, #4]	; (801228c <__sfp_lock_release+0x8>)
 8012286:	f000 b8ae 	b.w	80123e6 <__retarget_lock_release_recursive>
 801228a:	bf00      	nop
 801228c:	200000d9 	.word	0x200000d9

08012290 <__sinit_lock_acquire>:
 8012290:	4801      	ldr	r0, [pc, #4]	; (8012298 <__sinit_lock_acquire+0x8>)
 8012292:	f000 b8a7 	b.w	80123e4 <__retarget_lock_acquire_recursive>
 8012296:	bf00      	nop
 8012298:	200000da 	.word	0x200000da

0801229c <__sinit_lock_release>:
 801229c:	4801      	ldr	r0, [pc, #4]	; (80122a4 <__sinit_lock_release+0x8>)
 801229e:	f000 b8a2 	b.w	80123e6 <__retarget_lock_release_recursive>
 80122a2:	bf00      	nop
 80122a4:	200000da 	.word	0x200000da

080122a8 <__sinit>:
 80122a8:	b510      	push	{r4, lr}
 80122aa:	4604      	mov	r4, r0
 80122ac:	f7ff fff0 	bl	8012290 <__sinit_lock_acquire>
 80122b0:	69a3      	ldr	r3, [r4, #24]
 80122b2:	b11b      	cbz	r3, 80122bc <__sinit+0x14>
 80122b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122b8:	f7ff bff0 	b.w	801229c <__sinit_lock_release>
 80122bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80122c0:	6523      	str	r3, [r4, #80]	; 0x50
 80122c2:	4b13      	ldr	r3, [pc, #76]	; (8012310 <__sinit+0x68>)
 80122c4:	4a13      	ldr	r2, [pc, #76]	; (8012314 <__sinit+0x6c>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80122ca:	42a3      	cmp	r3, r4
 80122cc:	bf04      	itt	eq
 80122ce:	2301      	moveq	r3, #1
 80122d0:	61a3      	streq	r3, [r4, #24]
 80122d2:	4620      	mov	r0, r4
 80122d4:	f000 f820 	bl	8012318 <__sfp>
 80122d8:	6060      	str	r0, [r4, #4]
 80122da:	4620      	mov	r0, r4
 80122dc:	f000 f81c 	bl	8012318 <__sfp>
 80122e0:	60a0      	str	r0, [r4, #8]
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 f818 	bl	8012318 <__sfp>
 80122e8:	2200      	movs	r2, #0
 80122ea:	60e0      	str	r0, [r4, #12]
 80122ec:	2104      	movs	r1, #4
 80122ee:	6860      	ldr	r0, [r4, #4]
 80122f0:	f7ff ff82 	bl	80121f8 <std>
 80122f4:	68a0      	ldr	r0, [r4, #8]
 80122f6:	2201      	movs	r2, #1
 80122f8:	2109      	movs	r1, #9
 80122fa:	f7ff ff7d 	bl	80121f8 <std>
 80122fe:	68e0      	ldr	r0, [r4, #12]
 8012300:	2202      	movs	r2, #2
 8012302:	2112      	movs	r1, #18
 8012304:	f7ff ff78 	bl	80121f8 <std>
 8012308:	2301      	movs	r3, #1
 801230a:	61a3      	str	r3, [r4, #24]
 801230c:	e7d2      	b.n	80122b4 <__sinit+0xc>
 801230e:	bf00      	nop
 8012310:	08013148 	.word	0x08013148
 8012314:	08012241 	.word	0x08012241

08012318 <__sfp>:
 8012318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231a:	4607      	mov	r7, r0
 801231c:	f7ff ffac 	bl	8012278 <__sfp_lock_acquire>
 8012320:	4b1e      	ldr	r3, [pc, #120]	; (801239c <__sfp+0x84>)
 8012322:	681e      	ldr	r6, [r3, #0]
 8012324:	69b3      	ldr	r3, [r6, #24]
 8012326:	b913      	cbnz	r3, 801232e <__sfp+0x16>
 8012328:	4630      	mov	r0, r6
 801232a:	f7ff ffbd 	bl	80122a8 <__sinit>
 801232e:	3648      	adds	r6, #72	; 0x48
 8012330:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012334:	3b01      	subs	r3, #1
 8012336:	d503      	bpl.n	8012340 <__sfp+0x28>
 8012338:	6833      	ldr	r3, [r6, #0]
 801233a:	b30b      	cbz	r3, 8012380 <__sfp+0x68>
 801233c:	6836      	ldr	r6, [r6, #0]
 801233e:	e7f7      	b.n	8012330 <__sfp+0x18>
 8012340:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012344:	b9d5      	cbnz	r5, 801237c <__sfp+0x64>
 8012346:	4b16      	ldr	r3, [pc, #88]	; (80123a0 <__sfp+0x88>)
 8012348:	60e3      	str	r3, [r4, #12]
 801234a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801234e:	6665      	str	r5, [r4, #100]	; 0x64
 8012350:	f000 f847 	bl	80123e2 <__retarget_lock_init_recursive>
 8012354:	f7ff ff96 	bl	8012284 <__sfp_lock_release>
 8012358:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801235c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012360:	6025      	str	r5, [r4, #0]
 8012362:	61a5      	str	r5, [r4, #24]
 8012364:	2208      	movs	r2, #8
 8012366:	4629      	mov	r1, r5
 8012368:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801236c:	f7ff ff24 	bl	80121b8 <memset>
 8012370:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012374:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012378:	4620      	mov	r0, r4
 801237a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801237c:	3468      	adds	r4, #104	; 0x68
 801237e:	e7d9      	b.n	8012334 <__sfp+0x1c>
 8012380:	2104      	movs	r1, #4
 8012382:	4638      	mov	r0, r7
 8012384:	f7ff ff62 	bl	801224c <__sfmoreglue>
 8012388:	4604      	mov	r4, r0
 801238a:	6030      	str	r0, [r6, #0]
 801238c:	2800      	cmp	r0, #0
 801238e:	d1d5      	bne.n	801233c <__sfp+0x24>
 8012390:	f7ff ff78 	bl	8012284 <__sfp_lock_release>
 8012394:	230c      	movs	r3, #12
 8012396:	603b      	str	r3, [r7, #0]
 8012398:	e7ee      	b.n	8012378 <__sfp+0x60>
 801239a:	bf00      	nop
 801239c:	08013148 	.word	0x08013148
 80123a0:	ffff0001 	.word	0xffff0001

080123a4 <_fwalk_reent>:
 80123a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123a8:	4606      	mov	r6, r0
 80123aa:	4688      	mov	r8, r1
 80123ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80123b0:	2700      	movs	r7, #0
 80123b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123b6:	f1b9 0901 	subs.w	r9, r9, #1
 80123ba:	d505      	bpl.n	80123c8 <_fwalk_reent+0x24>
 80123bc:	6824      	ldr	r4, [r4, #0]
 80123be:	2c00      	cmp	r4, #0
 80123c0:	d1f7      	bne.n	80123b2 <_fwalk_reent+0xe>
 80123c2:	4638      	mov	r0, r7
 80123c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123c8:	89ab      	ldrh	r3, [r5, #12]
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d907      	bls.n	80123de <_fwalk_reent+0x3a>
 80123ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80123d2:	3301      	adds	r3, #1
 80123d4:	d003      	beq.n	80123de <_fwalk_reent+0x3a>
 80123d6:	4629      	mov	r1, r5
 80123d8:	4630      	mov	r0, r6
 80123da:	47c0      	blx	r8
 80123dc:	4307      	orrs	r7, r0
 80123de:	3568      	adds	r5, #104	; 0x68
 80123e0:	e7e9      	b.n	80123b6 <_fwalk_reent+0x12>

080123e2 <__retarget_lock_init_recursive>:
 80123e2:	4770      	bx	lr

080123e4 <__retarget_lock_acquire_recursive>:
 80123e4:	4770      	bx	lr

080123e6 <__retarget_lock_release_recursive>:
 80123e6:	4770      	bx	lr

080123e8 <sbrk_aligned>:
 80123e8:	b570      	push	{r4, r5, r6, lr}
 80123ea:	4e0e      	ldr	r6, [pc, #56]	; (8012424 <sbrk_aligned+0x3c>)
 80123ec:	460c      	mov	r4, r1
 80123ee:	6831      	ldr	r1, [r6, #0]
 80123f0:	4605      	mov	r5, r0
 80123f2:	b911      	cbnz	r1, 80123fa <sbrk_aligned+0x12>
 80123f4:	f000 fb7a 	bl	8012aec <_sbrk_r>
 80123f8:	6030      	str	r0, [r6, #0]
 80123fa:	4621      	mov	r1, r4
 80123fc:	4628      	mov	r0, r5
 80123fe:	f000 fb75 	bl	8012aec <_sbrk_r>
 8012402:	1c43      	adds	r3, r0, #1
 8012404:	d00a      	beq.n	801241c <sbrk_aligned+0x34>
 8012406:	1cc4      	adds	r4, r0, #3
 8012408:	f024 0403 	bic.w	r4, r4, #3
 801240c:	42a0      	cmp	r0, r4
 801240e:	d007      	beq.n	8012420 <sbrk_aligned+0x38>
 8012410:	1a21      	subs	r1, r4, r0
 8012412:	4628      	mov	r0, r5
 8012414:	f000 fb6a 	bl	8012aec <_sbrk_r>
 8012418:	3001      	adds	r0, #1
 801241a:	d101      	bne.n	8012420 <sbrk_aligned+0x38>
 801241c:	f04f 34ff 	mov.w	r4, #4294967295
 8012420:	4620      	mov	r0, r4
 8012422:	bd70      	pop	{r4, r5, r6, pc}
 8012424:	200000e0 	.word	0x200000e0

08012428 <_malloc_r>:
 8012428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801242c:	1ccd      	adds	r5, r1, #3
 801242e:	f025 0503 	bic.w	r5, r5, #3
 8012432:	3508      	adds	r5, #8
 8012434:	2d0c      	cmp	r5, #12
 8012436:	bf38      	it	cc
 8012438:	250c      	movcc	r5, #12
 801243a:	2d00      	cmp	r5, #0
 801243c:	4607      	mov	r7, r0
 801243e:	db01      	blt.n	8012444 <_malloc_r+0x1c>
 8012440:	42a9      	cmp	r1, r5
 8012442:	d905      	bls.n	8012450 <_malloc_r+0x28>
 8012444:	230c      	movs	r3, #12
 8012446:	603b      	str	r3, [r7, #0]
 8012448:	2600      	movs	r6, #0
 801244a:	4630      	mov	r0, r6
 801244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012450:	4e2e      	ldr	r6, [pc, #184]	; (801250c <_malloc_r+0xe4>)
 8012452:	f000 fdbb 	bl	8012fcc <__malloc_lock>
 8012456:	6833      	ldr	r3, [r6, #0]
 8012458:	461c      	mov	r4, r3
 801245a:	bb34      	cbnz	r4, 80124aa <_malloc_r+0x82>
 801245c:	4629      	mov	r1, r5
 801245e:	4638      	mov	r0, r7
 8012460:	f7ff ffc2 	bl	80123e8 <sbrk_aligned>
 8012464:	1c43      	adds	r3, r0, #1
 8012466:	4604      	mov	r4, r0
 8012468:	d14d      	bne.n	8012506 <_malloc_r+0xde>
 801246a:	6834      	ldr	r4, [r6, #0]
 801246c:	4626      	mov	r6, r4
 801246e:	2e00      	cmp	r6, #0
 8012470:	d140      	bne.n	80124f4 <_malloc_r+0xcc>
 8012472:	6823      	ldr	r3, [r4, #0]
 8012474:	4631      	mov	r1, r6
 8012476:	4638      	mov	r0, r7
 8012478:	eb04 0803 	add.w	r8, r4, r3
 801247c:	f000 fb36 	bl	8012aec <_sbrk_r>
 8012480:	4580      	cmp	r8, r0
 8012482:	d13a      	bne.n	80124fa <_malloc_r+0xd2>
 8012484:	6821      	ldr	r1, [r4, #0]
 8012486:	3503      	adds	r5, #3
 8012488:	1a6d      	subs	r5, r5, r1
 801248a:	f025 0503 	bic.w	r5, r5, #3
 801248e:	3508      	adds	r5, #8
 8012490:	2d0c      	cmp	r5, #12
 8012492:	bf38      	it	cc
 8012494:	250c      	movcc	r5, #12
 8012496:	4629      	mov	r1, r5
 8012498:	4638      	mov	r0, r7
 801249a:	f7ff ffa5 	bl	80123e8 <sbrk_aligned>
 801249e:	3001      	adds	r0, #1
 80124a0:	d02b      	beq.n	80124fa <_malloc_r+0xd2>
 80124a2:	6823      	ldr	r3, [r4, #0]
 80124a4:	442b      	add	r3, r5
 80124a6:	6023      	str	r3, [r4, #0]
 80124a8:	e00e      	b.n	80124c8 <_malloc_r+0xa0>
 80124aa:	6822      	ldr	r2, [r4, #0]
 80124ac:	1b52      	subs	r2, r2, r5
 80124ae:	d41e      	bmi.n	80124ee <_malloc_r+0xc6>
 80124b0:	2a0b      	cmp	r2, #11
 80124b2:	d916      	bls.n	80124e2 <_malloc_r+0xba>
 80124b4:	1961      	adds	r1, r4, r5
 80124b6:	42a3      	cmp	r3, r4
 80124b8:	6025      	str	r5, [r4, #0]
 80124ba:	bf18      	it	ne
 80124bc:	6059      	strne	r1, [r3, #4]
 80124be:	6863      	ldr	r3, [r4, #4]
 80124c0:	bf08      	it	eq
 80124c2:	6031      	streq	r1, [r6, #0]
 80124c4:	5162      	str	r2, [r4, r5]
 80124c6:	604b      	str	r3, [r1, #4]
 80124c8:	4638      	mov	r0, r7
 80124ca:	f104 060b 	add.w	r6, r4, #11
 80124ce:	f000 fd83 	bl	8012fd8 <__malloc_unlock>
 80124d2:	f026 0607 	bic.w	r6, r6, #7
 80124d6:	1d23      	adds	r3, r4, #4
 80124d8:	1af2      	subs	r2, r6, r3
 80124da:	d0b6      	beq.n	801244a <_malloc_r+0x22>
 80124dc:	1b9b      	subs	r3, r3, r6
 80124de:	50a3      	str	r3, [r4, r2]
 80124e0:	e7b3      	b.n	801244a <_malloc_r+0x22>
 80124e2:	6862      	ldr	r2, [r4, #4]
 80124e4:	42a3      	cmp	r3, r4
 80124e6:	bf0c      	ite	eq
 80124e8:	6032      	streq	r2, [r6, #0]
 80124ea:	605a      	strne	r2, [r3, #4]
 80124ec:	e7ec      	b.n	80124c8 <_malloc_r+0xa0>
 80124ee:	4623      	mov	r3, r4
 80124f0:	6864      	ldr	r4, [r4, #4]
 80124f2:	e7b2      	b.n	801245a <_malloc_r+0x32>
 80124f4:	4634      	mov	r4, r6
 80124f6:	6876      	ldr	r6, [r6, #4]
 80124f8:	e7b9      	b.n	801246e <_malloc_r+0x46>
 80124fa:	230c      	movs	r3, #12
 80124fc:	603b      	str	r3, [r7, #0]
 80124fe:	4638      	mov	r0, r7
 8012500:	f000 fd6a 	bl	8012fd8 <__malloc_unlock>
 8012504:	e7a1      	b.n	801244a <_malloc_r+0x22>
 8012506:	6025      	str	r5, [r4, #0]
 8012508:	e7de      	b.n	80124c8 <_malloc_r+0xa0>
 801250a:	bf00      	nop
 801250c:	200000dc 	.word	0x200000dc

08012510 <__sfputc_r>:
 8012510:	6893      	ldr	r3, [r2, #8]
 8012512:	3b01      	subs	r3, #1
 8012514:	2b00      	cmp	r3, #0
 8012516:	b410      	push	{r4}
 8012518:	6093      	str	r3, [r2, #8]
 801251a:	da08      	bge.n	801252e <__sfputc_r+0x1e>
 801251c:	6994      	ldr	r4, [r2, #24]
 801251e:	42a3      	cmp	r3, r4
 8012520:	db01      	blt.n	8012526 <__sfputc_r+0x16>
 8012522:	290a      	cmp	r1, #10
 8012524:	d103      	bne.n	801252e <__sfputc_r+0x1e>
 8012526:	f85d 4b04 	ldr.w	r4, [sp], #4
 801252a:	f000 bb33 	b.w	8012b94 <__swbuf_r>
 801252e:	6813      	ldr	r3, [r2, #0]
 8012530:	1c58      	adds	r0, r3, #1
 8012532:	6010      	str	r0, [r2, #0]
 8012534:	7019      	strb	r1, [r3, #0]
 8012536:	4608      	mov	r0, r1
 8012538:	f85d 4b04 	ldr.w	r4, [sp], #4
 801253c:	4770      	bx	lr

0801253e <__sfputs_r>:
 801253e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012540:	4606      	mov	r6, r0
 8012542:	460f      	mov	r7, r1
 8012544:	4614      	mov	r4, r2
 8012546:	18d5      	adds	r5, r2, r3
 8012548:	42ac      	cmp	r4, r5
 801254a:	d101      	bne.n	8012550 <__sfputs_r+0x12>
 801254c:	2000      	movs	r0, #0
 801254e:	e007      	b.n	8012560 <__sfputs_r+0x22>
 8012550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012554:	463a      	mov	r2, r7
 8012556:	4630      	mov	r0, r6
 8012558:	f7ff ffda 	bl	8012510 <__sfputc_r>
 801255c:	1c43      	adds	r3, r0, #1
 801255e:	d1f3      	bne.n	8012548 <__sfputs_r+0xa>
 8012560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012564 <_vfiprintf_r>:
 8012564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012568:	460d      	mov	r5, r1
 801256a:	b09d      	sub	sp, #116	; 0x74
 801256c:	4614      	mov	r4, r2
 801256e:	4698      	mov	r8, r3
 8012570:	4606      	mov	r6, r0
 8012572:	b118      	cbz	r0, 801257c <_vfiprintf_r+0x18>
 8012574:	6983      	ldr	r3, [r0, #24]
 8012576:	b90b      	cbnz	r3, 801257c <_vfiprintf_r+0x18>
 8012578:	f7ff fe96 	bl	80122a8 <__sinit>
 801257c:	4b89      	ldr	r3, [pc, #548]	; (80127a4 <_vfiprintf_r+0x240>)
 801257e:	429d      	cmp	r5, r3
 8012580:	d11b      	bne.n	80125ba <_vfiprintf_r+0x56>
 8012582:	6875      	ldr	r5, [r6, #4]
 8012584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012586:	07d9      	lsls	r1, r3, #31
 8012588:	d405      	bmi.n	8012596 <_vfiprintf_r+0x32>
 801258a:	89ab      	ldrh	r3, [r5, #12]
 801258c:	059a      	lsls	r2, r3, #22
 801258e:	d402      	bmi.n	8012596 <_vfiprintf_r+0x32>
 8012590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012592:	f7ff ff27 	bl	80123e4 <__retarget_lock_acquire_recursive>
 8012596:	89ab      	ldrh	r3, [r5, #12]
 8012598:	071b      	lsls	r3, r3, #28
 801259a:	d501      	bpl.n	80125a0 <_vfiprintf_r+0x3c>
 801259c:	692b      	ldr	r3, [r5, #16]
 801259e:	b9eb      	cbnz	r3, 80125dc <_vfiprintf_r+0x78>
 80125a0:	4629      	mov	r1, r5
 80125a2:	4630      	mov	r0, r6
 80125a4:	f000 fb5a 	bl	8012c5c <__swsetup_r>
 80125a8:	b1c0      	cbz	r0, 80125dc <_vfiprintf_r+0x78>
 80125aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125ac:	07dc      	lsls	r4, r3, #31
 80125ae:	d50e      	bpl.n	80125ce <_vfiprintf_r+0x6a>
 80125b0:	f04f 30ff 	mov.w	r0, #4294967295
 80125b4:	b01d      	add	sp, #116	; 0x74
 80125b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ba:	4b7b      	ldr	r3, [pc, #492]	; (80127a8 <_vfiprintf_r+0x244>)
 80125bc:	429d      	cmp	r5, r3
 80125be:	d101      	bne.n	80125c4 <_vfiprintf_r+0x60>
 80125c0:	68b5      	ldr	r5, [r6, #8]
 80125c2:	e7df      	b.n	8012584 <_vfiprintf_r+0x20>
 80125c4:	4b79      	ldr	r3, [pc, #484]	; (80127ac <_vfiprintf_r+0x248>)
 80125c6:	429d      	cmp	r5, r3
 80125c8:	bf08      	it	eq
 80125ca:	68f5      	ldreq	r5, [r6, #12]
 80125cc:	e7da      	b.n	8012584 <_vfiprintf_r+0x20>
 80125ce:	89ab      	ldrh	r3, [r5, #12]
 80125d0:	0598      	lsls	r0, r3, #22
 80125d2:	d4ed      	bmi.n	80125b0 <_vfiprintf_r+0x4c>
 80125d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125d6:	f7ff ff06 	bl	80123e6 <__retarget_lock_release_recursive>
 80125da:	e7e9      	b.n	80125b0 <_vfiprintf_r+0x4c>
 80125dc:	2300      	movs	r3, #0
 80125de:	9309      	str	r3, [sp, #36]	; 0x24
 80125e0:	2320      	movs	r3, #32
 80125e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80125ea:	2330      	movs	r3, #48	; 0x30
 80125ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80127b0 <_vfiprintf_r+0x24c>
 80125f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125f4:	f04f 0901 	mov.w	r9, #1
 80125f8:	4623      	mov	r3, r4
 80125fa:	469a      	mov	sl, r3
 80125fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012600:	b10a      	cbz	r2, 8012606 <_vfiprintf_r+0xa2>
 8012602:	2a25      	cmp	r2, #37	; 0x25
 8012604:	d1f9      	bne.n	80125fa <_vfiprintf_r+0x96>
 8012606:	ebba 0b04 	subs.w	fp, sl, r4
 801260a:	d00b      	beq.n	8012624 <_vfiprintf_r+0xc0>
 801260c:	465b      	mov	r3, fp
 801260e:	4622      	mov	r2, r4
 8012610:	4629      	mov	r1, r5
 8012612:	4630      	mov	r0, r6
 8012614:	f7ff ff93 	bl	801253e <__sfputs_r>
 8012618:	3001      	adds	r0, #1
 801261a:	f000 80aa 	beq.w	8012772 <_vfiprintf_r+0x20e>
 801261e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012620:	445a      	add	r2, fp
 8012622:	9209      	str	r2, [sp, #36]	; 0x24
 8012624:	f89a 3000 	ldrb.w	r3, [sl]
 8012628:	2b00      	cmp	r3, #0
 801262a:	f000 80a2 	beq.w	8012772 <_vfiprintf_r+0x20e>
 801262e:	2300      	movs	r3, #0
 8012630:	f04f 32ff 	mov.w	r2, #4294967295
 8012634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012638:	f10a 0a01 	add.w	sl, sl, #1
 801263c:	9304      	str	r3, [sp, #16]
 801263e:	9307      	str	r3, [sp, #28]
 8012640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012644:	931a      	str	r3, [sp, #104]	; 0x68
 8012646:	4654      	mov	r4, sl
 8012648:	2205      	movs	r2, #5
 801264a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801264e:	4858      	ldr	r0, [pc, #352]	; (80127b0 <_vfiprintf_r+0x24c>)
 8012650:	f7fd fdbe 	bl	80101d0 <memchr>
 8012654:	9a04      	ldr	r2, [sp, #16]
 8012656:	b9d8      	cbnz	r0, 8012690 <_vfiprintf_r+0x12c>
 8012658:	06d1      	lsls	r1, r2, #27
 801265a:	bf44      	itt	mi
 801265c:	2320      	movmi	r3, #32
 801265e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012662:	0713      	lsls	r3, r2, #28
 8012664:	bf44      	itt	mi
 8012666:	232b      	movmi	r3, #43	; 0x2b
 8012668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801266c:	f89a 3000 	ldrb.w	r3, [sl]
 8012670:	2b2a      	cmp	r3, #42	; 0x2a
 8012672:	d015      	beq.n	80126a0 <_vfiprintf_r+0x13c>
 8012674:	9a07      	ldr	r2, [sp, #28]
 8012676:	4654      	mov	r4, sl
 8012678:	2000      	movs	r0, #0
 801267a:	f04f 0c0a 	mov.w	ip, #10
 801267e:	4621      	mov	r1, r4
 8012680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012684:	3b30      	subs	r3, #48	; 0x30
 8012686:	2b09      	cmp	r3, #9
 8012688:	d94e      	bls.n	8012728 <_vfiprintf_r+0x1c4>
 801268a:	b1b0      	cbz	r0, 80126ba <_vfiprintf_r+0x156>
 801268c:	9207      	str	r2, [sp, #28]
 801268e:	e014      	b.n	80126ba <_vfiprintf_r+0x156>
 8012690:	eba0 0308 	sub.w	r3, r0, r8
 8012694:	fa09 f303 	lsl.w	r3, r9, r3
 8012698:	4313      	orrs	r3, r2
 801269a:	9304      	str	r3, [sp, #16]
 801269c:	46a2      	mov	sl, r4
 801269e:	e7d2      	b.n	8012646 <_vfiprintf_r+0xe2>
 80126a0:	9b03      	ldr	r3, [sp, #12]
 80126a2:	1d19      	adds	r1, r3, #4
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	9103      	str	r1, [sp, #12]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	bfbb      	ittet	lt
 80126ac:	425b      	neglt	r3, r3
 80126ae:	f042 0202 	orrlt.w	r2, r2, #2
 80126b2:	9307      	strge	r3, [sp, #28]
 80126b4:	9307      	strlt	r3, [sp, #28]
 80126b6:	bfb8      	it	lt
 80126b8:	9204      	strlt	r2, [sp, #16]
 80126ba:	7823      	ldrb	r3, [r4, #0]
 80126bc:	2b2e      	cmp	r3, #46	; 0x2e
 80126be:	d10c      	bne.n	80126da <_vfiprintf_r+0x176>
 80126c0:	7863      	ldrb	r3, [r4, #1]
 80126c2:	2b2a      	cmp	r3, #42	; 0x2a
 80126c4:	d135      	bne.n	8012732 <_vfiprintf_r+0x1ce>
 80126c6:	9b03      	ldr	r3, [sp, #12]
 80126c8:	1d1a      	adds	r2, r3, #4
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	9203      	str	r2, [sp, #12]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	bfb8      	it	lt
 80126d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80126d6:	3402      	adds	r4, #2
 80126d8:	9305      	str	r3, [sp, #20]
 80126da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80127c0 <_vfiprintf_r+0x25c>
 80126de:	7821      	ldrb	r1, [r4, #0]
 80126e0:	2203      	movs	r2, #3
 80126e2:	4650      	mov	r0, sl
 80126e4:	f7fd fd74 	bl	80101d0 <memchr>
 80126e8:	b140      	cbz	r0, 80126fc <_vfiprintf_r+0x198>
 80126ea:	2340      	movs	r3, #64	; 0x40
 80126ec:	eba0 000a 	sub.w	r0, r0, sl
 80126f0:	fa03 f000 	lsl.w	r0, r3, r0
 80126f4:	9b04      	ldr	r3, [sp, #16]
 80126f6:	4303      	orrs	r3, r0
 80126f8:	3401      	adds	r4, #1
 80126fa:	9304      	str	r3, [sp, #16]
 80126fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012700:	482c      	ldr	r0, [pc, #176]	; (80127b4 <_vfiprintf_r+0x250>)
 8012702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012706:	2206      	movs	r2, #6
 8012708:	f7fd fd62 	bl	80101d0 <memchr>
 801270c:	2800      	cmp	r0, #0
 801270e:	d03f      	beq.n	8012790 <_vfiprintf_r+0x22c>
 8012710:	4b29      	ldr	r3, [pc, #164]	; (80127b8 <_vfiprintf_r+0x254>)
 8012712:	bb1b      	cbnz	r3, 801275c <_vfiprintf_r+0x1f8>
 8012714:	9b03      	ldr	r3, [sp, #12]
 8012716:	3307      	adds	r3, #7
 8012718:	f023 0307 	bic.w	r3, r3, #7
 801271c:	3308      	adds	r3, #8
 801271e:	9303      	str	r3, [sp, #12]
 8012720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012722:	443b      	add	r3, r7
 8012724:	9309      	str	r3, [sp, #36]	; 0x24
 8012726:	e767      	b.n	80125f8 <_vfiprintf_r+0x94>
 8012728:	fb0c 3202 	mla	r2, ip, r2, r3
 801272c:	460c      	mov	r4, r1
 801272e:	2001      	movs	r0, #1
 8012730:	e7a5      	b.n	801267e <_vfiprintf_r+0x11a>
 8012732:	2300      	movs	r3, #0
 8012734:	3401      	adds	r4, #1
 8012736:	9305      	str	r3, [sp, #20]
 8012738:	4619      	mov	r1, r3
 801273a:	f04f 0c0a 	mov.w	ip, #10
 801273e:	4620      	mov	r0, r4
 8012740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012744:	3a30      	subs	r2, #48	; 0x30
 8012746:	2a09      	cmp	r2, #9
 8012748:	d903      	bls.n	8012752 <_vfiprintf_r+0x1ee>
 801274a:	2b00      	cmp	r3, #0
 801274c:	d0c5      	beq.n	80126da <_vfiprintf_r+0x176>
 801274e:	9105      	str	r1, [sp, #20]
 8012750:	e7c3      	b.n	80126da <_vfiprintf_r+0x176>
 8012752:	fb0c 2101 	mla	r1, ip, r1, r2
 8012756:	4604      	mov	r4, r0
 8012758:	2301      	movs	r3, #1
 801275a:	e7f0      	b.n	801273e <_vfiprintf_r+0x1da>
 801275c:	ab03      	add	r3, sp, #12
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	462a      	mov	r2, r5
 8012762:	4b16      	ldr	r3, [pc, #88]	; (80127bc <_vfiprintf_r+0x258>)
 8012764:	a904      	add	r1, sp, #16
 8012766:	4630      	mov	r0, r6
 8012768:	f3af 8000 	nop.w
 801276c:	4607      	mov	r7, r0
 801276e:	1c78      	adds	r0, r7, #1
 8012770:	d1d6      	bne.n	8012720 <_vfiprintf_r+0x1bc>
 8012772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012774:	07d9      	lsls	r1, r3, #31
 8012776:	d405      	bmi.n	8012784 <_vfiprintf_r+0x220>
 8012778:	89ab      	ldrh	r3, [r5, #12]
 801277a:	059a      	lsls	r2, r3, #22
 801277c:	d402      	bmi.n	8012784 <_vfiprintf_r+0x220>
 801277e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012780:	f7ff fe31 	bl	80123e6 <__retarget_lock_release_recursive>
 8012784:	89ab      	ldrh	r3, [r5, #12]
 8012786:	065b      	lsls	r3, r3, #25
 8012788:	f53f af12 	bmi.w	80125b0 <_vfiprintf_r+0x4c>
 801278c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801278e:	e711      	b.n	80125b4 <_vfiprintf_r+0x50>
 8012790:	ab03      	add	r3, sp, #12
 8012792:	9300      	str	r3, [sp, #0]
 8012794:	462a      	mov	r2, r5
 8012796:	4b09      	ldr	r3, [pc, #36]	; (80127bc <_vfiprintf_r+0x258>)
 8012798:	a904      	add	r1, sp, #16
 801279a:	4630      	mov	r0, r6
 801279c:	f000 f880 	bl	80128a0 <_printf_i>
 80127a0:	e7e4      	b.n	801276c <_vfiprintf_r+0x208>
 80127a2:	bf00      	nop
 80127a4:	0801316c 	.word	0x0801316c
 80127a8:	0801318c 	.word	0x0801318c
 80127ac:	0801314c 	.word	0x0801314c
 80127b0:	080131ac 	.word	0x080131ac
 80127b4:	080131b6 	.word	0x080131b6
 80127b8:	00000000 	.word	0x00000000
 80127bc:	0801253f 	.word	0x0801253f
 80127c0:	080131b2 	.word	0x080131b2

080127c4 <_printf_common>:
 80127c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127c8:	4616      	mov	r6, r2
 80127ca:	4699      	mov	r9, r3
 80127cc:	688a      	ldr	r2, [r1, #8]
 80127ce:	690b      	ldr	r3, [r1, #16]
 80127d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127d4:	4293      	cmp	r3, r2
 80127d6:	bfb8      	it	lt
 80127d8:	4613      	movlt	r3, r2
 80127da:	6033      	str	r3, [r6, #0]
 80127dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127e0:	4607      	mov	r7, r0
 80127e2:	460c      	mov	r4, r1
 80127e4:	b10a      	cbz	r2, 80127ea <_printf_common+0x26>
 80127e6:	3301      	adds	r3, #1
 80127e8:	6033      	str	r3, [r6, #0]
 80127ea:	6823      	ldr	r3, [r4, #0]
 80127ec:	0699      	lsls	r1, r3, #26
 80127ee:	bf42      	ittt	mi
 80127f0:	6833      	ldrmi	r3, [r6, #0]
 80127f2:	3302      	addmi	r3, #2
 80127f4:	6033      	strmi	r3, [r6, #0]
 80127f6:	6825      	ldr	r5, [r4, #0]
 80127f8:	f015 0506 	ands.w	r5, r5, #6
 80127fc:	d106      	bne.n	801280c <_printf_common+0x48>
 80127fe:	f104 0a19 	add.w	sl, r4, #25
 8012802:	68e3      	ldr	r3, [r4, #12]
 8012804:	6832      	ldr	r2, [r6, #0]
 8012806:	1a9b      	subs	r3, r3, r2
 8012808:	42ab      	cmp	r3, r5
 801280a:	dc26      	bgt.n	801285a <_printf_common+0x96>
 801280c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012810:	1e13      	subs	r3, r2, #0
 8012812:	6822      	ldr	r2, [r4, #0]
 8012814:	bf18      	it	ne
 8012816:	2301      	movne	r3, #1
 8012818:	0692      	lsls	r2, r2, #26
 801281a:	d42b      	bmi.n	8012874 <_printf_common+0xb0>
 801281c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012820:	4649      	mov	r1, r9
 8012822:	4638      	mov	r0, r7
 8012824:	47c0      	blx	r8
 8012826:	3001      	adds	r0, #1
 8012828:	d01e      	beq.n	8012868 <_printf_common+0xa4>
 801282a:	6823      	ldr	r3, [r4, #0]
 801282c:	68e5      	ldr	r5, [r4, #12]
 801282e:	6832      	ldr	r2, [r6, #0]
 8012830:	f003 0306 	and.w	r3, r3, #6
 8012834:	2b04      	cmp	r3, #4
 8012836:	bf08      	it	eq
 8012838:	1aad      	subeq	r5, r5, r2
 801283a:	68a3      	ldr	r3, [r4, #8]
 801283c:	6922      	ldr	r2, [r4, #16]
 801283e:	bf0c      	ite	eq
 8012840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012844:	2500      	movne	r5, #0
 8012846:	4293      	cmp	r3, r2
 8012848:	bfc4      	itt	gt
 801284a:	1a9b      	subgt	r3, r3, r2
 801284c:	18ed      	addgt	r5, r5, r3
 801284e:	2600      	movs	r6, #0
 8012850:	341a      	adds	r4, #26
 8012852:	42b5      	cmp	r5, r6
 8012854:	d11a      	bne.n	801288c <_printf_common+0xc8>
 8012856:	2000      	movs	r0, #0
 8012858:	e008      	b.n	801286c <_printf_common+0xa8>
 801285a:	2301      	movs	r3, #1
 801285c:	4652      	mov	r2, sl
 801285e:	4649      	mov	r1, r9
 8012860:	4638      	mov	r0, r7
 8012862:	47c0      	blx	r8
 8012864:	3001      	adds	r0, #1
 8012866:	d103      	bne.n	8012870 <_printf_common+0xac>
 8012868:	f04f 30ff 	mov.w	r0, #4294967295
 801286c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012870:	3501      	adds	r5, #1
 8012872:	e7c6      	b.n	8012802 <_printf_common+0x3e>
 8012874:	18e1      	adds	r1, r4, r3
 8012876:	1c5a      	adds	r2, r3, #1
 8012878:	2030      	movs	r0, #48	; 0x30
 801287a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801287e:	4422      	add	r2, r4
 8012880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012888:	3302      	adds	r3, #2
 801288a:	e7c7      	b.n	801281c <_printf_common+0x58>
 801288c:	2301      	movs	r3, #1
 801288e:	4622      	mov	r2, r4
 8012890:	4649      	mov	r1, r9
 8012892:	4638      	mov	r0, r7
 8012894:	47c0      	blx	r8
 8012896:	3001      	adds	r0, #1
 8012898:	d0e6      	beq.n	8012868 <_printf_common+0xa4>
 801289a:	3601      	adds	r6, #1
 801289c:	e7d9      	b.n	8012852 <_printf_common+0x8e>
	...

080128a0 <_printf_i>:
 80128a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128a4:	7e0f      	ldrb	r7, [r1, #24]
 80128a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128a8:	2f78      	cmp	r7, #120	; 0x78
 80128aa:	4691      	mov	r9, r2
 80128ac:	4680      	mov	r8, r0
 80128ae:	460c      	mov	r4, r1
 80128b0:	469a      	mov	sl, r3
 80128b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80128b6:	d807      	bhi.n	80128c8 <_printf_i+0x28>
 80128b8:	2f62      	cmp	r7, #98	; 0x62
 80128ba:	d80a      	bhi.n	80128d2 <_printf_i+0x32>
 80128bc:	2f00      	cmp	r7, #0
 80128be:	f000 80d8 	beq.w	8012a72 <_printf_i+0x1d2>
 80128c2:	2f58      	cmp	r7, #88	; 0x58
 80128c4:	f000 80a3 	beq.w	8012a0e <_printf_i+0x16e>
 80128c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80128d0:	e03a      	b.n	8012948 <_printf_i+0xa8>
 80128d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80128d6:	2b15      	cmp	r3, #21
 80128d8:	d8f6      	bhi.n	80128c8 <_printf_i+0x28>
 80128da:	a101      	add	r1, pc, #4	; (adr r1, 80128e0 <_printf_i+0x40>)
 80128dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80128e0:	08012939 	.word	0x08012939
 80128e4:	0801294d 	.word	0x0801294d
 80128e8:	080128c9 	.word	0x080128c9
 80128ec:	080128c9 	.word	0x080128c9
 80128f0:	080128c9 	.word	0x080128c9
 80128f4:	080128c9 	.word	0x080128c9
 80128f8:	0801294d 	.word	0x0801294d
 80128fc:	080128c9 	.word	0x080128c9
 8012900:	080128c9 	.word	0x080128c9
 8012904:	080128c9 	.word	0x080128c9
 8012908:	080128c9 	.word	0x080128c9
 801290c:	08012a59 	.word	0x08012a59
 8012910:	0801297d 	.word	0x0801297d
 8012914:	08012a3b 	.word	0x08012a3b
 8012918:	080128c9 	.word	0x080128c9
 801291c:	080128c9 	.word	0x080128c9
 8012920:	08012a7b 	.word	0x08012a7b
 8012924:	080128c9 	.word	0x080128c9
 8012928:	0801297d 	.word	0x0801297d
 801292c:	080128c9 	.word	0x080128c9
 8012930:	080128c9 	.word	0x080128c9
 8012934:	08012a43 	.word	0x08012a43
 8012938:	682b      	ldr	r3, [r5, #0]
 801293a:	1d1a      	adds	r2, r3, #4
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	602a      	str	r2, [r5, #0]
 8012940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012948:	2301      	movs	r3, #1
 801294a:	e0a3      	b.n	8012a94 <_printf_i+0x1f4>
 801294c:	6820      	ldr	r0, [r4, #0]
 801294e:	6829      	ldr	r1, [r5, #0]
 8012950:	0606      	lsls	r6, r0, #24
 8012952:	f101 0304 	add.w	r3, r1, #4
 8012956:	d50a      	bpl.n	801296e <_printf_i+0xce>
 8012958:	680e      	ldr	r6, [r1, #0]
 801295a:	602b      	str	r3, [r5, #0]
 801295c:	2e00      	cmp	r6, #0
 801295e:	da03      	bge.n	8012968 <_printf_i+0xc8>
 8012960:	232d      	movs	r3, #45	; 0x2d
 8012962:	4276      	negs	r6, r6
 8012964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012968:	485e      	ldr	r0, [pc, #376]	; (8012ae4 <_printf_i+0x244>)
 801296a:	230a      	movs	r3, #10
 801296c:	e019      	b.n	80129a2 <_printf_i+0x102>
 801296e:	680e      	ldr	r6, [r1, #0]
 8012970:	602b      	str	r3, [r5, #0]
 8012972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012976:	bf18      	it	ne
 8012978:	b236      	sxthne	r6, r6
 801297a:	e7ef      	b.n	801295c <_printf_i+0xbc>
 801297c:	682b      	ldr	r3, [r5, #0]
 801297e:	6820      	ldr	r0, [r4, #0]
 8012980:	1d19      	adds	r1, r3, #4
 8012982:	6029      	str	r1, [r5, #0]
 8012984:	0601      	lsls	r1, r0, #24
 8012986:	d501      	bpl.n	801298c <_printf_i+0xec>
 8012988:	681e      	ldr	r6, [r3, #0]
 801298a:	e002      	b.n	8012992 <_printf_i+0xf2>
 801298c:	0646      	lsls	r6, r0, #25
 801298e:	d5fb      	bpl.n	8012988 <_printf_i+0xe8>
 8012990:	881e      	ldrh	r6, [r3, #0]
 8012992:	4854      	ldr	r0, [pc, #336]	; (8012ae4 <_printf_i+0x244>)
 8012994:	2f6f      	cmp	r7, #111	; 0x6f
 8012996:	bf0c      	ite	eq
 8012998:	2308      	moveq	r3, #8
 801299a:	230a      	movne	r3, #10
 801299c:	2100      	movs	r1, #0
 801299e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129a2:	6865      	ldr	r5, [r4, #4]
 80129a4:	60a5      	str	r5, [r4, #8]
 80129a6:	2d00      	cmp	r5, #0
 80129a8:	bfa2      	ittt	ge
 80129aa:	6821      	ldrge	r1, [r4, #0]
 80129ac:	f021 0104 	bicge.w	r1, r1, #4
 80129b0:	6021      	strge	r1, [r4, #0]
 80129b2:	b90e      	cbnz	r6, 80129b8 <_printf_i+0x118>
 80129b4:	2d00      	cmp	r5, #0
 80129b6:	d04d      	beq.n	8012a54 <_printf_i+0x1b4>
 80129b8:	4615      	mov	r5, r2
 80129ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80129be:	fb03 6711 	mls	r7, r3, r1, r6
 80129c2:	5dc7      	ldrb	r7, [r0, r7]
 80129c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80129c8:	4637      	mov	r7, r6
 80129ca:	42bb      	cmp	r3, r7
 80129cc:	460e      	mov	r6, r1
 80129ce:	d9f4      	bls.n	80129ba <_printf_i+0x11a>
 80129d0:	2b08      	cmp	r3, #8
 80129d2:	d10b      	bne.n	80129ec <_printf_i+0x14c>
 80129d4:	6823      	ldr	r3, [r4, #0]
 80129d6:	07de      	lsls	r6, r3, #31
 80129d8:	d508      	bpl.n	80129ec <_printf_i+0x14c>
 80129da:	6923      	ldr	r3, [r4, #16]
 80129dc:	6861      	ldr	r1, [r4, #4]
 80129de:	4299      	cmp	r1, r3
 80129e0:	bfde      	ittt	le
 80129e2:	2330      	movle	r3, #48	; 0x30
 80129e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129ec:	1b52      	subs	r2, r2, r5
 80129ee:	6122      	str	r2, [r4, #16]
 80129f0:	f8cd a000 	str.w	sl, [sp]
 80129f4:	464b      	mov	r3, r9
 80129f6:	aa03      	add	r2, sp, #12
 80129f8:	4621      	mov	r1, r4
 80129fa:	4640      	mov	r0, r8
 80129fc:	f7ff fee2 	bl	80127c4 <_printf_common>
 8012a00:	3001      	adds	r0, #1
 8012a02:	d14c      	bne.n	8012a9e <_printf_i+0x1fe>
 8012a04:	f04f 30ff 	mov.w	r0, #4294967295
 8012a08:	b004      	add	sp, #16
 8012a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a0e:	4835      	ldr	r0, [pc, #212]	; (8012ae4 <_printf_i+0x244>)
 8012a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012a14:	6829      	ldr	r1, [r5, #0]
 8012a16:	6823      	ldr	r3, [r4, #0]
 8012a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a1c:	6029      	str	r1, [r5, #0]
 8012a1e:	061d      	lsls	r5, r3, #24
 8012a20:	d514      	bpl.n	8012a4c <_printf_i+0x1ac>
 8012a22:	07df      	lsls	r7, r3, #31
 8012a24:	bf44      	itt	mi
 8012a26:	f043 0320 	orrmi.w	r3, r3, #32
 8012a2a:	6023      	strmi	r3, [r4, #0]
 8012a2c:	b91e      	cbnz	r6, 8012a36 <_printf_i+0x196>
 8012a2e:	6823      	ldr	r3, [r4, #0]
 8012a30:	f023 0320 	bic.w	r3, r3, #32
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	2310      	movs	r3, #16
 8012a38:	e7b0      	b.n	801299c <_printf_i+0xfc>
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	f043 0320 	orr.w	r3, r3, #32
 8012a40:	6023      	str	r3, [r4, #0]
 8012a42:	2378      	movs	r3, #120	; 0x78
 8012a44:	4828      	ldr	r0, [pc, #160]	; (8012ae8 <_printf_i+0x248>)
 8012a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a4a:	e7e3      	b.n	8012a14 <_printf_i+0x174>
 8012a4c:	0659      	lsls	r1, r3, #25
 8012a4e:	bf48      	it	mi
 8012a50:	b2b6      	uxthmi	r6, r6
 8012a52:	e7e6      	b.n	8012a22 <_printf_i+0x182>
 8012a54:	4615      	mov	r5, r2
 8012a56:	e7bb      	b.n	80129d0 <_printf_i+0x130>
 8012a58:	682b      	ldr	r3, [r5, #0]
 8012a5a:	6826      	ldr	r6, [r4, #0]
 8012a5c:	6961      	ldr	r1, [r4, #20]
 8012a5e:	1d18      	adds	r0, r3, #4
 8012a60:	6028      	str	r0, [r5, #0]
 8012a62:	0635      	lsls	r5, r6, #24
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	d501      	bpl.n	8012a6c <_printf_i+0x1cc>
 8012a68:	6019      	str	r1, [r3, #0]
 8012a6a:	e002      	b.n	8012a72 <_printf_i+0x1d2>
 8012a6c:	0670      	lsls	r0, r6, #25
 8012a6e:	d5fb      	bpl.n	8012a68 <_printf_i+0x1c8>
 8012a70:	8019      	strh	r1, [r3, #0]
 8012a72:	2300      	movs	r3, #0
 8012a74:	6123      	str	r3, [r4, #16]
 8012a76:	4615      	mov	r5, r2
 8012a78:	e7ba      	b.n	80129f0 <_printf_i+0x150>
 8012a7a:	682b      	ldr	r3, [r5, #0]
 8012a7c:	1d1a      	adds	r2, r3, #4
 8012a7e:	602a      	str	r2, [r5, #0]
 8012a80:	681d      	ldr	r5, [r3, #0]
 8012a82:	6862      	ldr	r2, [r4, #4]
 8012a84:	2100      	movs	r1, #0
 8012a86:	4628      	mov	r0, r5
 8012a88:	f7fd fba2 	bl	80101d0 <memchr>
 8012a8c:	b108      	cbz	r0, 8012a92 <_printf_i+0x1f2>
 8012a8e:	1b40      	subs	r0, r0, r5
 8012a90:	6060      	str	r0, [r4, #4]
 8012a92:	6863      	ldr	r3, [r4, #4]
 8012a94:	6123      	str	r3, [r4, #16]
 8012a96:	2300      	movs	r3, #0
 8012a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a9c:	e7a8      	b.n	80129f0 <_printf_i+0x150>
 8012a9e:	6923      	ldr	r3, [r4, #16]
 8012aa0:	462a      	mov	r2, r5
 8012aa2:	4649      	mov	r1, r9
 8012aa4:	4640      	mov	r0, r8
 8012aa6:	47d0      	blx	sl
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	d0ab      	beq.n	8012a04 <_printf_i+0x164>
 8012aac:	6823      	ldr	r3, [r4, #0]
 8012aae:	079b      	lsls	r3, r3, #30
 8012ab0:	d413      	bmi.n	8012ada <_printf_i+0x23a>
 8012ab2:	68e0      	ldr	r0, [r4, #12]
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	4298      	cmp	r0, r3
 8012ab8:	bfb8      	it	lt
 8012aba:	4618      	movlt	r0, r3
 8012abc:	e7a4      	b.n	8012a08 <_printf_i+0x168>
 8012abe:	2301      	movs	r3, #1
 8012ac0:	4632      	mov	r2, r6
 8012ac2:	4649      	mov	r1, r9
 8012ac4:	4640      	mov	r0, r8
 8012ac6:	47d0      	blx	sl
 8012ac8:	3001      	adds	r0, #1
 8012aca:	d09b      	beq.n	8012a04 <_printf_i+0x164>
 8012acc:	3501      	adds	r5, #1
 8012ace:	68e3      	ldr	r3, [r4, #12]
 8012ad0:	9903      	ldr	r1, [sp, #12]
 8012ad2:	1a5b      	subs	r3, r3, r1
 8012ad4:	42ab      	cmp	r3, r5
 8012ad6:	dcf2      	bgt.n	8012abe <_printf_i+0x21e>
 8012ad8:	e7eb      	b.n	8012ab2 <_printf_i+0x212>
 8012ada:	2500      	movs	r5, #0
 8012adc:	f104 0619 	add.w	r6, r4, #25
 8012ae0:	e7f5      	b.n	8012ace <_printf_i+0x22e>
 8012ae2:	bf00      	nop
 8012ae4:	080131bd 	.word	0x080131bd
 8012ae8:	080131ce 	.word	0x080131ce

08012aec <_sbrk_r>:
 8012aec:	b538      	push	{r3, r4, r5, lr}
 8012aee:	4d06      	ldr	r5, [pc, #24]	; (8012b08 <_sbrk_r+0x1c>)
 8012af0:	2300      	movs	r3, #0
 8012af2:	4604      	mov	r4, r0
 8012af4:	4608      	mov	r0, r1
 8012af6:	602b      	str	r3, [r5, #0]
 8012af8:	f7fd ff72 	bl	80109e0 <_sbrk>
 8012afc:	1c43      	adds	r3, r0, #1
 8012afe:	d102      	bne.n	8012b06 <_sbrk_r+0x1a>
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	b103      	cbz	r3, 8012b06 <_sbrk_r+0x1a>
 8012b04:	6023      	str	r3, [r4, #0]
 8012b06:	bd38      	pop	{r3, r4, r5, pc}
 8012b08:	200000e4 	.word	0x200000e4

08012b0c <__sread>:
 8012b0c:	b510      	push	{r4, lr}
 8012b0e:	460c      	mov	r4, r1
 8012b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b14:	f000 fab2 	bl	801307c <_read_r>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	bfab      	itete	ge
 8012b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8012b20:	181b      	addge	r3, r3, r0
 8012b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b26:	bfac      	ite	ge
 8012b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b2a:	81a3      	strhlt	r3, [r4, #12]
 8012b2c:	bd10      	pop	{r4, pc}

08012b2e <__swrite>:
 8012b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b32:	461f      	mov	r7, r3
 8012b34:	898b      	ldrh	r3, [r1, #12]
 8012b36:	05db      	lsls	r3, r3, #23
 8012b38:	4605      	mov	r5, r0
 8012b3a:	460c      	mov	r4, r1
 8012b3c:	4616      	mov	r6, r2
 8012b3e:	d505      	bpl.n	8012b4c <__swrite+0x1e>
 8012b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b44:	2302      	movs	r3, #2
 8012b46:	2200      	movs	r2, #0
 8012b48:	f000 f9c8 	bl	8012edc <_lseek_r>
 8012b4c:	89a3      	ldrh	r3, [r4, #12]
 8012b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b56:	81a3      	strh	r3, [r4, #12]
 8012b58:	4632      	mov	r2, r6
 8012b5a:	463b      	mov	r3, r7
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b62:	f000 b869 	b.w	8012c38 <_write_r>

08012b66 <__sseek>:
 8012b66:	b510      	push	{r4, lr}
 8012b68:	460c      	mov	r4, r1
 8012b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b6e:	f000 f9b5 	bl	8012edc <_lseek_r>
 8012b72:	1c43      	adds	r3, r0, #1
 8012b74:	89a3      	ldrh	r3, [r4, #12]
 8012b76:	bf15      	itete	ne
 8012b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b82:	81a3      	strheq	r3, [r4, #12]
 8012b84:	bf18      	it	ne
 8012b86:	81a3      	strhne	r3, [r4, #12]
 8012b88:	bd10      	pop	{r4, pc}

08012b8a <__sclose>:
 8012b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b8e:	f000 b8d3 	b.w	8012d38 <_close_r>
	...

08012b94 <__swbuf_r>:
 8012b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b96:	460e      	mov	r6, r1
 8012b98:	4614      	mov	r4, r2
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	b118      	cbz	r0, 8012ba6 <__swbuf_r+0x12>
 8012b9e:	6983      	ldr	r3, [r0, #24]
 8012ba0:	b90b      	cbnz	r3, 8012ba6 <__swbuf_r+0x12>
 8012ba2:	f7ff fb81 	bl	80122a8 <__sinit>
 8012ba6:	4b21      	ldr	r3, [pc, #132]	; (8012c2c <__swbuf_r+0x98>)
 8012ba8:	429c      	cmp	r4, r3
 8012baa:	d12b      	bne.n	8012c04 <__swbuf_r+0x70>
 8012bac:	686c      	ldr	r4, [r5, #4]
 8012bae:	69a3      	ldr	r3, [r4, #24]
 8012bb0:	60a3      	str	r3, [r4, #8]
 8012bb2:	89a3      	ldrh	r3, [r4, #12]
 8012bb4:	071a      	lsls	r2, r3, #28
 8012bb6:	d52f      	bpl.n	8012c18 <__swbuf_r+0x84>
 8012bb8:	6923      	ldr	r3, [r4, #16]
 8012bba:	b36b      	cbz	r3, 8012c18 <__swbuf_r+0x84>
 8012bbc:	6923      	ldr	r3, [r4, #16]
 8012bbe:	6820      	ldr	r0, [r4, #0]
 8012bc0:	1ac0      	subs	r0, r0, r3
 8012bc2:	6963      	ldr	r3, [r4, #20]
 8012bc4:	b2f6      	uxtb	r6, r6
 8012bc6:	4283      	cmp	r3, r0
 8012bc8:	4637      	mov	r7, r6
 8012bca:	dc04      	bgt.n	8012bd6 <__swbuf_r+0x42>
 8012bcc:	4621      	mov	r1, r4
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f000 f948 	bl	8012e64 <_fflush_r>
 8012bd4:	bb30      	cbnz	r0, 8012c24 <__swbuf_r+0x90>
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	60a3      	str	r3, [r4, #8]
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	6022      	str	r2, [r4, #0]
 8012be2:	701e      	strb	r6, [r3, #0]
 8012be4:	6963      	ldr	r3, [r4, #20]
 8012be6:	3001      	adds	r0, #1
 8012be8:	4283      	cmp	r3, r0
 8012bea:	d004      	beq.n	8012bf6 <__swbuf_r+0x62>
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	07db      	lsls	r3, r3, #31
 8012bf0:	d506      	bpl.n	8012c00 <__swbuf_r+0x6c>
 8012bf2:	2e0a      	cmp	r6, #10
 8012bf4:	d104      	bne.n	8012c00 <__swbuf_r+0x6c>
 8012bf6:	4621      	mov	r1, r4
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	f000 f933 	bl	8012e64 <_fflush_r>
 8012bfe:	b988      	cbnz	r0, 8012c24 <__swbuf_r+0x90>
 8012c00:	4638      	mov	r0, r7
 8012c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c04:	4b0a      	ldr	r3, [pc, #40]	; (8012c30 <__swbuf_r+0x9c>)
 8012c06:	429c      	cmp	r4, r3
 8012c08:	d101      	bne.n	8012c0e <__swbuf_r+0x7a>
 8012c0a:	68ac      	ldr	r4, [r5, #8]
 8012c0c:	e7cf      	b.n	8012bae <__swbuf_r+0x1a>
 8012c0e:	4b09      	ldr	r3, [pc, #36]	; (8012c34 <__swbuf_r+0xa0>)
 8012c10:	429c      	cmp	r4, r3
 8012c12:	bf08      	it	eq
 8012c14:	68ec      	ldreq	r4, [r5, #12]
 8012c16:	e7ca      	b.n	8012bae <__swbuf_r+0x1a>
 8012c18:	4621      	mov	r1, r4
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	f000 f81e 	bl	8012c5c <__swsetup_r>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	d0cb      	beq.n	8012bbc <__swbuf_r+0x28>
 8012c24:	f04f 37ff 	mov.w	r7, #4294967295
 8012c28:	e7ea      	b.n	8012c00 <__swbuf_r+0x6c>
 8012c2a:	bf00      	nop
 8012c2c:	0801316c 	.word	0x0801316c
 8012c30:	0801318c 	.word	0x0801318c
 8012c34:	0801314c 	.word	0x0801314c

08012c38 <_write_r>:
 8012c38:	b538      	push	{r3, r4, r5, lr}
 8012c3a:	4d07      	ldr	r5, [pc, #28]	; (8012c58 <_write_r+0x20>)
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	4608      	mov	r0, r1
 8012c40:	4611      	mov	r1, r2
 8012c42:	2200      	movs	r2, #0
 8012c44:	602a      	str	r2, [r5, #0]
 8012c46:	461a      	mov	r2, r3
 8012c48:	f7fd fdc2 	bl	80107d0 <_write>
 8012c4c:	1c43      	adds	r3, r0, #1
 8012c4e:	d102      	bne.n	8012c56 <_write_r+0x1e>
 8012c50:	682b      	ldr	r3, [r5, #0]
 8012c52:	b103      	cbz	r3, 8012c56 <_write_r+0x1e>
 8012c54:	6023      	str	r3, [r4, #0]
 8012c56:	bd38      	pop	{r3, r4, r5, pc}
 8012c58:	200000e4 	.word	0x200000e4

08012c5c <__swsetup_r>:
 8012c5c:	4b32      	ldr	r3, [pc, #200]	; (8012d28 <__swsetup_r+0xcc>)
 8012c5e:	b570      	push	{r4, r5, r6, lr}
 8012c60:	681d      	ldr	r5, [r3, #0]
 8012c62:	4606      	mov	r6, r0
 8012c64:	460c      	mov	r4, r1
 8012c66:	b125      	cbz	r5, 8012c72 <__swsetup_r+0x16>
 8012c68:	69ab      	ldr	r3, [r5, #24]
 8012c6a:	b913      	cbnz	r3, 8012c72 <__swsetup_r+0x16>
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f7ff fb1b 	bl	80122a8 <__sinit>
 8012c72:	4b2e      	ldr	r3, [pc, #184]	; (8012d2c <__swsetup_r+0xd0>)
 8012c74:	429c      	cmp	r4, r3
 8012c76:	d10f      	bne.n	8012c98 <__swsetup_r+0x3c>
 8012c78:	686c      	ldr	r4, [r5, #4]
 8012c7a:	89a3      	ldrh	r3, [r4, #12]
 8012c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c80:	0719      	lsls	r1, r3, #28
 8012c82:	d42c      	bmi.n	8012cde <__swsetup_r+0x82>
 8012c84:	06dd      	lsls	r5, r3, #27
 8012c86:	d411      	bmi.n	8012cac <__swsetup_r+0x50>
 8012c88:	2309      	movs	r3, #9
 8012c8a:	6033      	str	r3, [r6, #0]
 8012c8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c90:	81a3      	strh	r3, [r4, #12]
 8012c92:	f04f 30ff 	mov.w	r0, #4294967295
 8012c96:	e03e      	b.n	8012d16 <__swsetup_r+0xba>
 8012c98:	4b25      	ldr	r3, [pc, #148]	; (8012d30 <__swsetup_r+0xd4>)
 8012c9a:	429c      	cmp	r4, r3
 8012c9c:	d101      	bne.n	8012ca2 <__swsetup_r+0x46>
 8012c9e:	68ac      	ldr	r4, [r5, #8]
 8012ca0:	e7eb      	b.n	8012c7a <__swsetup_r+0x1e>
 8012ca2:	4b24      	ldr	r3, [pc, #144]	; (8012d34 <__swsetup_r+0xd8>)
 8012ca4:	429c      	cmp	r4, r3
 8012ca6:	bf08      	it	eq
 8012ca8:	68ec      	ldreq	r4, [r5, #12]
 8012caa:	e7e6      	b.n	8012c7a <__swsetup_r+0x1e>
 8012cac:	0758      	lsls	r0, r3, #29
 8012cae:	d512      	bpl.n	8012cd6 <__swsetup_r+0x7a>
 8012cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cb2:	b141      	cbz	r1, 8012cc6 <__swsetup_r+0x6a>
 8012cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012cb8:	4299      	cmp	r1, r3
 8012cba:	d002      	beq.n	8012cc2 <__swsetup_r+0x66>
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f000 f991 	bl	8012fe4 <_free_r>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8012cc6:	89a3      	ldrh	r3, [r4, #12]
 8012cc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ccc:	81a3      	strh	r3, [r4, #12]
 8012cce:	2300      	movs	r3, #0
 8012cd0:	6063      	str	r3, [r4, #4]
 8012cd2:	6923      	ldr	r3, [r4, #16]
 8012cd4:	6023      	str	r3, [r4, #0]
 8012cd6:	89a3      	ldrh	r3, [r4, #12]
 8012cd8:	f043 0308 	orr.w	r3, r3, #8
 8012cdc:	81a3      	strh	r3, [r4, #12]
 8012cde:	6923      	ldr	r3, [r4, #16]
 8012ce0:	b94b      	cbnz	r3, 8012cf6 <__swsetup_r+0x9a>
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cec:	d003      	beq.n	8012cf6 <__swsetup_r+0x9a>
 8012cee:	4621      	mov	r1, r4
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	f000 f92b 	bl	8012f4c <__smakebuf_r>
 8012cf6:	89a0      	ldrh	r0, [r4, #12]
 8012cf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012cfc:	f010 0301 	ands.w	r3, r0, #1
 8012d00:	d00a      	beq.n	8012d18 <__swsetup_r+0xbc>
 8012d02:	2300      	movs	r3, #0
 8012d04:	60a3      	str	r3, [r4, #8]
 8012d06:	6963      	ldr	r3, [r4, #20]
 8012d08:	425b      	negs	r3, r3
 8012d0a:	61a3      	str	r3, [r4, #24]
 8012d0c:	6923      	ldr	r3, [r4, #16]
 8012d0e:	b943      	cbnz	r3, 8012d22 <__swsetup_r+0xc6>
 8012d10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012d14:	d1ba      	bne.n	8012c8c <__swsetup_r+0x30>
 8012d16:	bd70      	pop	{r4, r5, r6, pc}
 8012d18:	0781      	lsls	r1, r0, #30
 8012d1a:	bf58      	it	pl
 8012d1c:	6963      	ldrpl	r3, [r4, #20]
 8012d1e:	60a3      	str	r3, [r4, #8]
 8012d20:	e7f4      	b.n	8012d0c <__swsetup_r+0xb0>
 8012d22:	2000      	movs	r0, #0
 8012d24:	e7f7      	b.n	8012d16 <__swsetup_r+0xba>
 8012d26:	bf00      	nop
 8012d28:	2000000c 	.word	0x2000000c
 8012d2c:	0801316c 	.word	0x0801316c
 8012d30:	0801318c 	.word	0x0801318c
 8012d34:	0801314c 	.word	0x0801314c

08012d38 <_close_r>:
 8012d38:	b538      	push	{r3, r4, r5, lr}
 8012d3a:	4d06      	ldr	r5, [pc, #24]	; (8012d54 <_close_r+0x1c>)
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	4604      	mov	r4, r0
 8012d40:	4608      	mov	r0, r1
 8012d42:	602b      	str	r3, [r5, #0]
 8012d44:	f7fd fe17 	bl	8010976 <_close>
 8012d48:	1c43      	adds	r3, r0, #1
 8012d4a:	d102      	bne.n	8012d52 <_close_r+0x1a>
 8012d4c:	682b      	ldr	r3, [r5, #0]
 8012d4e:	b103      	cbz	r3, 8012d52 <_close_r+0x1a>
 8012d50:	6023      	str	r3, [r4, #0]
 8012d52:	bd38      	pop	{r3, r4, r5, pc}
 8012d54:	200000e4 	.word	0x200000e4

08012d58 <__sflush_r>:
 8012d58:	898a      	ldrh	r2, [r1, #12]
 8012d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d5e:	4605      	mov	r5, r0
 8012d60:	0710      	lsls	r0, r2, #28
 8012d62:	460c      	mov	r4, r1
 8012d64:	d458      	bmi.n	8012e18 <__sflush_r+0xc0>
 8012d66:	684b      	ldr	r3, [r1, #4]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	dc05      	bgt.n	8012d78 <__sflush_r+0x20>
 8012d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	dc02      	bgt.n	8012d78 <__sflush_r+0x20>
 8012d72:	2000      	movs	r0, #0
 8012d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d7a:	2e00      	cmp	r6, #0
 8012d7c:	d0f9      	beq.n	8012d72 <__sflush_r+0x1a>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d84:	682f      	ldr	r7, [r5, #0]
 8012d86:	602b      	str	r3, [r5, #0]
 8012d88:	d032      	beq.n	8012df0 <__sflush_r+0x98>
 8012d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d8c:	89a3      	ldrh	r3, [r4, #12]
 8012d8e:	075a      	lsls	r2, r3, #29
 8012d90:	d505      	bpl.n	8012d9e <__sflush_r+0x46>
 8012d92:	6863      	ldr	r3, [r4, #4]
 8012d94:	1ac0      	subs	r0, r0, r3
 8012d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d98:	b10b      	cbz	r3, 8012d9e <__sflush_r+0x46>
 8012d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d9c:	1ac0      	subs	r0, r0, r3
 8012d9e:	2300      	movs	r3, #0
 8012da0:	4602      	mov	r2, r0
 8012da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012da4:	6a21      	ldr	r1, [r4, #32]
 8012da6:	4628      	mov	r0, r5
 8012da8:	47b0      	blx	r6
 8012daa:	1c43      	adds	r3, r0, #1
 8012dac:	89a3      	ldrh	r3, [r4, #12]
 8012dae:	d106      	bne.n	8012dbe <__sflush_r+0x66>
 8012db0:	6829      	ldr	r1, [r5, #0]
 8012db2:	291d      	cmp	r1, #29
 8012db4:	d82c      	bhi.n	8012e10 <__sflush_r+0xb8>
 8012db6:	4a2a      	ldr	r2, [pc, #168]	; (8012e60 <__sflush_r+0x108>)
 8012db8:	40ca      	lsrs	r2, r1
 8012dba:	07d6      	lsls	r6, r2, #31
 8012dbc:	d528      	bpl.n	8012e10 <__sflush_r+0xb8>
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	6062      	str	r2, [r4, #4]
 8012dc2:	04d9      	lsls	r1, r3, #19
 8012dc4:	6922      	ldr	r2, [r4, #16]
 8012dc6:	6022      	str	r2, [r4, #0]
 8012dc8:	d504      	bpl.n	8012dd4 <__sflush_r+0x7c>
 8012dca:	1c42      	adds	r2, r0, #1
 8012dcc:	d101      	bne.n	8012dd2 <__sflush_r+0x7a>
 8012dce:	682b      	ldr	r3, [r5, #0]
 8012dd0:	b903      	cbnz	r3, 8012dd4 <__sflush_r+0x7c>
 8012dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8012dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dd6:	602f      	str	r7, [r5, #0]
 8012dd8:	2900      	cmp	r1, #0
 8012dda:	d0ca      	beq.n	8012d72 <__sflush_r+0x1a>
 8012ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012de0:	4299      	cmp	r1, r3
 8012de2:	d002      	beq.n	8012dea <__sflush_r+0x92>
 8012de4:	4628      	mov	r0, r5
 8012de6:	f000 f8fd 	bl	8012fe4 <_free_r>
 8012dea:	2000      	movs	r0, #0
 8012dec:	6360      	str	r0, [r4, #52]	; 0x34
 8012dee:	e7c1      	b.n	8012d74 <__sflush_r+0x1c>
 8012df0:	6a21      	ldr	r1, [r4, #32]
 8012df2:	2301      	movs	r3, #1
 8012df4:	4628      	mov	r0, r5
 8012df6:	47b0      	blx	r6
 8012df8:	1c41      	adds	r1, r0, #1
 8012dfa:	d1c7      	bne.n	8012d8c <__sflush_r+0x34>
 8012dfc:	682b      	ldr	r3, [r5, #0]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d0c4      	beq.n	8012d8c <__sflush_r+0x34>
 8012e02:	2b1d      	cmp	r3, #29
 8012e04:	d001      	beq.n	8012e0a <__sflush_r+0xb2>
 8012e06:	2b16      	cmp	r3, #22
 8012e08:	d101      	bne.n	8012e0e <__sflush_r+0xb6>
 8012e0a:	602f      	str	r7, [r5, #0]
 8012e0c:	e7b1      	b.n	8012d72 <__sflush_r+0x1a>
 8012e0e:	89a3      	ldrh	r3, [r4, #12]
 8012e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e14:	81a3      	strh	r3, [r4, #12]
 8012e16:	e7ad      	b.n	8012d74 <__sflush_r+0x1c>
 8012e18:	690f      	ldr	r7, [r1, #16]
 8012e1a:	2f00      	cmp	r7, #0
 8012e1c:	d0a9      	beq.n	8012d72 <__sflush_r+0x1a>
 8012e1e:	0793      	lsls	r3, r2, #30
 8012e20:	680e      	ldr	r6, [r1, #0]
 8012e22:	bf08      	it	eq
 8012e24:	694b      	ldreq	r3, [r1, #20]
 8012e26:	600f      	str	r7, [r1, #0]
 8012e28:	bf18      	it	ne
 8012e2a:	2300      	movne	r3, #0
 8012e2c:	eba6 0807 	sub.w	r8, r6, r7
 8012e30:	608b      	str	r3, [r1, #8]
 8012e32:	f1b8 0f00 	cmp.w	r8, #0
 8012e36:	dd9c      	ble.n	8012d72 <__sflush_r+0x1a>
 8012e38:	6a21      	ldr	r1, [r4, #32]
 8012e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e3c:	4643      	mov	r3, r8
 8012e3e:	463a      	mov	r2, r7
 8012e40:	4628      	mov	r0, r5
 8012e42:	47b0      	blx	r6
 8012e44:	2800      	cmp	r0, #0
 8012e46:	dc06      	bgt.n	8012e56 <__sflush_r+0xfe>
 8012e48:	89a3      	ldrh	r3, [r4, #12]
 8012e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e4e:	81a3      	strh	r3, [r4, #12]
 8012e50:	f04f 30ff 	mov.w	r0, #4294967295
 8012e54:	e78e      	b.n	8012d74 <__sflush_r+0x1c>
 8012e56:	4407      	add	r7, r0
 8012e58:	eba8 0800 	sub.w	r8, r8, r0
 8012e5c:	e7e9      	b.n	8012e32 <__sflush_r+0xda>
 8012e5e:	bf00      	nop
 8012e60:	20400001 	.word	0x20400001

08012e64 <_fflush_r>:
 8012e64:	b538      	push	{r3, r4, r5, lr}
 8012e66:	690b      	ldr	r3, [r1, #16]
 8012e68:	4605      	mov	r5, r0
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	b913      	cbnz	r3, 8012e74 <_fflush_r+0x10>
 8012e6e:	2500      	movs	r5, #0
 8012e70:	4628      	mov	r0, r5
 8012e72:	bd38      	pop	{r3, r4, r5, pc}
 8012e74:	b118      	cbz	r0, 8012e7e <_fflush_r+0x1a>
 8012e76:	6983      	ldr	r3, [r0, #24]
 8012e78:	b90b      	cbnz	r3, 8012e7e <_fflush_r+0x1a>
 8012e7a:	f7ff fa15 	bl	80122a8 <__sinit>
 8012e7e:	4b14      	ldr	r3, [pc, #80]	; (8012ed0 <_fflush_r+0x6c>)
 8012e80:	429c      	cmp	r4, r3
 8012e82:	d11b      	bne.n	8012ebc <_fflush_r+0x58>
 8012e84:	686c      	ldr	r4, [r5, #4]
 8012e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d0ef      	beq.n	8012e6e <_fflush_r+0xa>
 8012e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e90:	07d0      	lsls	r0, r2, #31
 8012e92:	d404      	bmi.n	8012e9e <_fflush_r+0x3a>
 8012e94:	0599      	lsls	r1, r3, #22
 8012e96:	d402      	bmi.n	8012e9e <_fflush_r+0x3a>
 8012e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e9a:	f7ff faa3 	bl	80123e4 <__retarget_lock_acquire_recursive>
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	4621      	mov	r1, r4
 8012ea2:	f7ff ff59 	bl	8012d58 <__sflush_r>
 8012ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ea8:	07da      	lsls	r2, r3, #31
 8012eaa:	4605      	mov	r5, r0
 8012eac:	d4e0      	bmi.n	8012e70 <_fflush_r+0xc>
 8012eae:	89a3      	ldrh	r3, [r4, #12]
 8012eb0:	059b      	lsls	r3, r3, #22
 8012eb2:	d4dd      	bmi.n	8012e70 <_fflush_r+0xc>
 8012eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012eb6:	f7ff fa96 	bl	80123e6 <__retarget_lock_release_recursive>
 8012eba:	e7d9      	b.n	8012e70 <_fflush_r+0xc>
 8012ebc:	4b05      	ldr	r3, [pc, #20]	; (8012ed4 <_fflush_r+0x70>)
 8012ebe:	429c      	cmp	r4, r3
 8012ec0:	d101      	bne.n	8012ec6 <_fflush_r+0x62>
 8012ec2:	68ac      	ldr	r4, [r5, #8]
 8012ec4:	e7df      	b.n	8012e86 <_fflush_r+0x22>
 8012ec6:	4b04      	ldr	r3, [pc, #16]	; (8012ed8 <_fflush_r+0x74>)
 8012ec8:	429c      	cmp	r4, r3
 8012eca:	bf08      	it	eq
 8012ecc:	68ec      	ldreq	r4, [r5, #12]
 8012ece:	e7da      	b.n	8012e86 <_fflush_r+0x22>
 8012ed0:	0801316c 	.word	0x0801316c
 8012ed4:	0801318c 	.word	0x0801318c
 8012ed8:	0801314c 	.word	0x0801314c

08012edc <_lseek_r>:
 8012edc:	b538      	push	{r3, r4, r5, lr}
 8012ede:	4d07      	ldr	r5, [pc, #28]	; (8012efc <_lseek_r+0x20>)
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	4608      	mov	r0, r1
 8012ee4:	4611      	mov	r1, r2
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	602a      	str	r2, [r5, #0]
 8012eea:	461a      	mov	r2, r3
 8012eec:	f7fd fd6a 	bl	80109c4 <_lseek>
 8012ef0:	1c43      	adds	r3, r0, #1
 8012ef2:	d102      	bne.n	8012efa <_lseek_r+0x1e>
 8012ef4:	682b      	ldr	r3, [r5, #0]
 8012ef6:	b103      	cbz	r3, 8012efa <_lseek_r+0x1e>
 8012ef8:	6023      	str	r3, [r4, #0]
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	200000e4 	.word	0x200000e4

08012f00 <__swhatbuf_r>:
 8012f00:	b570      	push	{r4, r5, r6, lr}
 8012f02:	460e      	mov	r6, r1
 8012f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f08:	2900      	cmp	r1, #0
 8012f0a:	b096      	sub	sp, #88	; 0x58
 8012f0c:	4614      	mov	r4, r2
 8012f0e:	461d      	mov	r5, r3
 8012f10:	da08      	bge.n	8012f24 <__swhatbuf_r+0x24>
 8012f12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012f16:	2200      	movs	r2, #0
 8012f18:	602a      	str	r2, [r5, #0]
 8012f1a:	061a      	lsls	r2, r3, #24
 8012f1c:	d410      	bmi.n	8012f40 <__swhatbuf_r+0x40>
 8012f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f22:	e00e      	b.n	8012f42 <__swhatbuf_r+0x42>
 8012f24:	466a      	mov	r2, sp
 8012f26:	f000 f8bb 	bl	80130a0 <_fstat_r>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	dbf1      	blt.n	8012f12 <__swhatbuf_r+0x12>
 8012f2e:	9a01      	ldr	r2, [sp, #4]
 8012f30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012f34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012f38:	425a      	negs	r2, r3
 8012f3a:	415a      	adcs	r2, r3
 8012f3c:	602a      	str	r2, [r5, #0]
 8012f3e:	e7ee      	b.n	8012f1e <__swhatbuf_r+0x1e>
 8012f40:	2340      	movs	r3, #64	; 0x40
 8012f42:	2000      	movs	r0, #0
 8012f44:	6023      	str	r3, [r4, #0]
 8012f46:	b016      	add	sp, #88	; 0x58
 8012f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08012f4c <__smakebuf_r>:
 8012f4c:	898b      	ldrh	r3, [r1, #12]
 8012f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f50:	079d      	lsls	r5, r3, #30
 8012f52:	4606      	mov	r6, r0
 8012f54:	460c      	mov	r4, r1
 8012f56:	d507      	bpl.n	8012f68 <__smakebuf_r+0x1c>
 8012f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f5c:	6023      	str	r3, [r4, #0]
 8012f5e:	6123      	str	r3, [r4, #16]
 8012f60:	2301      	movs	r3, #1
 8012f62:	6163      	str	r3, [r4, #20]
 8012f64:	b002      	add	sp, #8
 8012f66:	bd70      	pop	{r4, r5, r6, pc}
 8012f68:	ab01      	add	r3, sp, #4
 8012f6a:	466a      	mov	r2, sp
 8012f6c:	f7ff ffc8 	bl	8012f00 <__swhatbuf_r>
 8012f70:	9900      	ldr	r1, [sp, #0]
 8012f72:	4605      	mov	r5, r0
 8012f74:	4630      	mov	r0, r6
 8012f76:	f7ff fa57 	bl	8012428 <_malloc_r>
 8012f7a:	b948      	cbnz	r0, 8012f90 <__smakebuf_r+0x44>
 8012f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f80:	059a      	lsls	r2, r3, #22
 8012f82:	d4ef      	bmi.n	8012f64 <__smakebuf_r+0x18>
 8012f84:	f023 0303 	bic.w	r3, r3, #3
 8012f88:	f043 0302 	orr.w	r3, r3, #2
 8012f8c:	81a3      	strh	r3, [r4, #12]
 8012f8e:	e7e3      	b.n	8012f58 <__smakebuf_r+0xc>
 8012f90:	4b0d      	ldr	r3, [pc, #52]	; (8012fc8 <__smakebuf_r+0x7c>)
 8012f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	6020      	str	r0, [r4, #0]
 8012f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f9c:	81a3      	strh	r3, [r4, #12]
 8012f9e:	9b00      	ldr	r3, [sp, #0]
 8012fa0:	6163      	str	r3, [r4, #20]
 8012fa2:	9b01      	ldr	r3, [sp, #4]
 8012fa4:	6120      	str	r0, [r4, #16]
 8012fa6:	b15b      	cbz	r3, 8012fc0 <__smakebuf_r+0x74>
 8012fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fac:	4630      	mov	r0, r6
 8012fae:	f000 f889 	bl	80130c4 <_isatty_r>
 8012fb2:	b128      	cbz	r0, 8012fc0 <__smakebuf_r+0x74>
 8012fb4:	89a3      	ldrh	r3, [r4, #12]
 8012fb6:	f023 0303 	bic.w	r3, r3, #3
 8012fba:	f043 0301 	orr.w	r3, r3, #1
 8012fbe:	81a3      	strh	r3, [r4, #12]
 8012fc0:	89a0      	ldrh	r0, [r4, #12]
 8012fc2:	4305      	orrs	r5, r0
 8012fc4:	81a5      	strh	r5, [r4, #12]
 8012fc6:	e7cd      	b.n	8012f64 <__smakebuf_r+0x18>
 8012fc8:	08012241 	.word	0x08012241

08012fcc <__malloc_lock>:
 8012fcc:	4801      	ldr	r0, [pc, #4]	; (8012fd4 <__malloc_lock+0x8>)
 8012fce:	f7ff ba09 	b.w	80123e4 <__retarget_lock_acquire_recursive>
 8012fd2:	bf00      	nop
 8012fd4:	200000d8 	.word	0x200000d8

08012fd8 <__malloc_unlock>:
 8012fd8:	4801      	ldr	r0, [pc, #4]	; (8012fe0 <__malloc_unlock+0x8>)
 8012fda:	f7ff ba04 	b.w	80123e6 <__retarget_lock_release_recursive>
 8012fde:	bf00      	nop
 8012fe0:	200000d8 	.word	0x200000d8

08012fe4 <_free_r>:
 8012fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fe6:	2900      	cmp	r1, #0
 8012fe8:	d044      	beq.n	8013074 <_free_r+0x90>
 8012fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fee:	9001      	str	r0, [sp, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8012ff6:	bfb8      	it	lt
 8012ff8:	18e4      	addlt	r4, r4, r3
 8012ffa:	f7ff ffe7 	bl	8012fcc <__malloc_lock>
 8012ffe:	4a1e      	ldr	r2, [pc, #120]	; (8013078 <_free_r+0x94>)
 8013000:	9801      	ldr	r0, [sp, #4]
 8013002:	6813      	ldr	r3, [r2, #0]
 8013004:	b933      	cbnz	r3, 8013014 <_free_r+0x30>
 8013006:	6063      	str	r3, [r4, #4]
 8013008:	6014      	str	r4, [r2, #0]
 801300a:	b003      	add	sp, #12
 801300c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013010:	f7ff bfe2 	b.w	8012fd8 <__malloc_unlock>
 8013014:	42a3      	cmp	r3, r4
 8013016:	d908      	bls.n	801302a <_free_r+0x46>
 8013018:	6825      	ldr	r5, [r4, #0]
 801301a:	1961      	adds	r1, r4, r5
 801301c:	428b      	cmp	r3, r1
 801301e:	bf01      	itttt	eq
 8013020:	6819      	ldreq	r1, [r3, #0]
 8013022:	685b      	ldreq	r3, [r3, #4]
 8013024:	1949      	addeq	r1, r1, r5
 8013026:	6021      	streq	r1, [r4, #0]
 8013028:	e7ed      	b.n	8013006 <_free_r+0x22>
 801302a:	461a      	mov	r2, r3
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	b10b      	cbz	r3, 8013034 <_free_r+0x50>
 8013030:	42a3      	cmp	r3, r4
 8013032:	d9fa      	bls.n	801302a <_free_r+0x46>
 8013034:	6811      	ldr	r1, [r2, #0]
 8013036:	1855      	adds	r5, r2, r1
 8013038:	42a5      	cmp	r5, r4
 801303a:	d10b      	bne.n	8013054 <_free_r+0x70>
 801303c:	6824      	ldr	r4, [r4, #0]
 801303e:	4421      	add	r1, r4
 8013040:	1854      	adds	r4, r2, r1
 8013042:	42a3      	cmp	r3, r4
 8013044:	6011      	str	r1, [r2, #0]
 8013046:	d1e0      	bne.n	801300a <_free_r+0x26>
 8013048:	681c      	ldr	r4, [r3, #0]
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	6053      	str	r3, [r2, #4]
 801304e:	4421      	add	r1, r4
 8013050:	6011      	str	r1, [r2, #0]
 8013052:	e7da      	b.n	801300a <_free_r+0x26>
 8013054:	d902      	bls.n	801305c <_free_r+0x78>
 8013056:	230c      	movs	r3, #12
 8013058:	6003      	str	r3, [r0, #0]
 801305a:	e7d6      	b.n	801300a <_free_r+0x26>
 801305c:	6825      	ldr	r5, [r4, #0]
 801305e:	1961      	adds	r1, r4, r5
 8013060:	428b      	cmp	r3, r1
 8013062:	bf04      	itt	eq
 8013064:	6819      	ldreq	r1, [r3, #0]
 8013066:	685b      	ldreq	r3, [r3, #4]
 8013068:	6063      	str	r3, [r4, #4]
 801306a:	bf04      	itt	eq
 801306c:	1949      	addeq	r1, r1, r5
 801306e:	6021      	streq	r1, [r4, #0]
 8013070:	6054      	str	r4, [r2, #4]
 8013072:	e7ca      	b.n	801300a <_free_r+0x26>
 8013074:	b003      	add	sp, #12
 8013076:	bd30      	pop	{r4, r5, pc}
 8013078:	200000dc 	.word	0x200000dc

0801307c <_read_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4d07      	ldr	r5, [pc, #28]	; (801309c <_read_r+0x20>)
 8013080:	4604      	mov	r4, r0
 8013082:	4608      	mov	r0, r1
 8013084:	4611      	mov	r1, r2
 8013086:	2200      	movs	r2, #0
 8013088:	602a      	str	r2, [r5, #0]
 801308a:	461a      	mov	r2, r3
 801308c:	f7fd fc56 	bl	801093c <_read>
 8013090:	1c43      	adds	r3, r0, #1
 8013092:	d102      	bne.n	801309a <_read_r+0x1e>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	b103      	cbz	r3, 801309a <_read_r+0x1e>
 8013098:	6023      	str	r3, [r4, #0]
 801309a:	bd38      	pop	{r3, r4, r5, pc}
 801309c:	200000e4 	.word	0x200000e4

080130a0 <_fstat_r>:
 80130a0:	b538      	push	{r3, r4, r5, lr}
 80130a2:	4d07      	ldr	r5, [pc, #28]	; (80130c0 <_fstat_r+0x20>)
 80130a4:	2300      	movs	r3, #0
 80130a6:	4604      	mov	r4, r0
 80130a8:	4608      	mov	r0, r1
 80130aa:	4611      	mov	r1, r2
 80130ac:	602b      	str	r3, [r5, #0]
 80130ae:	f7fd fc6e 	bl	801098e <_fstat>
 80130b2:	1c43      	adds	r3, r0, #1
 80130b4:	d102      	bne.n	80130bc <_fstat_r+0x1c>
 80130b6:	682b      	ldr	r3, [r5, #0]
 80130b8:	b103      	cbz	r3, 80130bc <_fstat_r+0x1c>
 80130ba:	6023      	str	r3, [r4, #0]
 80130bc:	bd38      	pop	{r3, r4, r5, pc}
 80130be:	bf00      	nop
 80130c0:	200000e4 	.word	0x200000e4

080130c4 <_isatty_r>:
 80130c4:	b538      	push	{r3, r4, r5, lr}
 80130c6:	4d06      	ldr	r5, [pc, #24]	; (80130e0 <_isatty_r+0x1c>)
 80130c8:	2300      	movs	r3, #0
 80130ca:	4604      	mov	r4, r0
 80130cc:	4608      	mov	r0, r1
 80130ce:	602b      	str	r3, [r5, #0]
 80130d0:	f7fd fc6d 	bl	80109ae <_isatty>
 80130d4:	1c43      	adds	r3, r0, #1
 80130d6:	d102      	bne.n	80130de <_isatty_r+0x1a>
 80130d8:	682b      	ldr	r3, [r5, #0]
 80130da:	b103      	cbz	r3, 80130de <_isatty_r+0x1a>
 80130dc:	6023      	str	r3, [r4, #0]
 80130de:	bd38      	pop	{r3, r4, r5, pc}
 80130e0:	200000e4 	.word	0x200000e4

080130e4 <_init>:
 80130e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130e6:	bf00      	nop
 80130e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130ea:	bc08      	pop	{r3}
 80130ec:	469e      	mov	lr, r3
 80130ee:	4770      	bx	lr

080130f0 <_fini>:
 80130f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f2:	bf00      	nop
 80130f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130f6:	bc08      	pop	{r3}
 80130f8:	469e      	mov	lr, r3
 80130fa:	4770      	bx	lr
